package sailpoint.services.tools.docgen;

import java.io.*;
import java.nio.file.FileSystems;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.TreeMap;

/**
 * Created by adam.creaney on 3/24/16.
 */
public class Documentizer {
    public File source;
    public File destination;
    public String seperator;
    public HashMap<String,String> implementedClasses;
    
    static private final String OBJECT_TYPE_TEMPLATE ="<BR>\n" +
            "<FONT CLASS=\"FrameItemFont\"><A HREF=\"{ObjectType}/object-frame.html\" target=\"objectListFrame\">{ObjectType}</A></FONT>";

    static private final String OBJECT_OVERVIEW_FRAME_TEMPLATE = "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n" +
            "<!--NewPage-->\n" +
            "<HTML>\n" +
            "<HEAD>\n" +
            "<TITLE>\n" +
            "Overview\n" +
            "</TITLE>\n" +
            "\n" +
            "<META NAME=\"keywords\" CONTENT=\"Overview\">\n" +
            "\n" +
            "<LINK REL =\"stylesheet\" TYPE=\"text/css\" HREF=\"stylesheet.css\" TITLE=\"Style\">\n" +
            "\n" +
            "\n" +
            "</HEAD>\n" +
            "\n" +
            "<BODY BGCOLOR=\"white\">\n" +
            "\n" +
            "<TABLE BORDER=\"0\" WIDTH=\"100%\" SUMMARY=\"\">\n" +
            "<TR>\n" +
            "<TH ALIGN=\"left\" NOWRAP><FONT size=\"+1\" CLASS=\"FrameTitleFont\">\n" +
            "<B></B></FONT></TH>\n" +
            "</TR>\n" +
            "</TABLE>\n" +
            "\n" +
            "<TABLE BORDER=\"0\" WIDTH=\"100%\" SUMMARY=\"\">\n" +
            "<TR>\n" +
            "<TD NOWRAP>\n" +
            "<FONT size=\"+1\" CLASS=\"FrameHeadingFont\">Object Types</FONT>\n" +
            "{ObjectTypeList}\n" +
            "<BR>\n" +
            "</TD>\n" +
            "</TR>\n" +
            "</TABLE>\n" +
            "\n" +
            "<P>\n" +
            "&nbsp;\n" +
            "</BODY>\n" +
            "</HTML>";

    static private final String OBJECT_INDEX_TEMPLATE = "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Frameset//EN\" \"http://www.w3.org/TR/html4/frameset.dtd\">\n" +
            "<!--NewPage-->\n" +
            "<HTML>\n" +
            "<HEAD>\n" +
            "<!-- Generated by javadoc on Fri Sep 28 16:09:55 CDT 2012-->\n" +
            "<TITLE>\n" +
            "Generated Documentation (Untitled)\n" +
            "</TITLE>\n" +
            "</HEAD>\n" +
            "<FRAMESET cols=\"20%,80%\" title=\"\" onLoad=\"top.loadFrames()\">\n" +
            "<FRAMESET rows=\"30%,70%\" title=\"\" onLoad=\"top.loadFrames()\">\n" +
            "<FRAME src=\"overview-frame.html\" name=\"objectTypesFrame\" title=\"All Packages\">\n" +
            "<FRAME src=\"overview-frame.html\" name=\"objectListFrame\" title=\"All classes and interfaces (except non-static nested types)\">\n" +
            "</FRAMESET>\n" +
            "<FRAME src=\"overview-frame.html\" name=\"objectFrame\" title=\"Package, class and interface descriptions\" scrolling=\"yes\">\n" +
            "</FRAMESET>\n" +
            "</HTML>";

    
    static public DocBase base = new DocBase();

    public Documentizer(File src, File dest){
        this.source = src;
        this.destination = dest;
        this.seperator = FileSystems.getDefault().getSeparator();
    }

    public void execute(){

    	try{

            OutputStream os = new FileOutputStream((destination.getAbsolutePath() + seperator + "index.html"));
            OutputStreamWriter sw = new OutputStreamWriter(os);
            

            sw.write(OBJECT_INDEX_TEMPLATE);

            sw.flush();
            sw.close();

            if(true){
                //TODO: Implement searchAll configuration later
                //boolean searchAll = true;    --uncomment when implementing code
                try {
                    DocBase.source = this.source;
                	DocBase.destination = this.destination;
                	DocumentizerUtils.processAllXmlFiles();
                	HashMap<String,ArrayList<File>> artifactsMap = DocumentizerUtils.getArtifactsMap();
                	DocApplication.doDocumentation(artifactsMap.get(DocBase.DOCTYPE.Application.name()));
                	DocAuditConfig.doDocumentation(artifactsMap.get(DocBase.DOCTYPE.AuditConfig.name()));
                	DocBundle.doDocumentation(artifactsMap.get(DocBase.DOCTYPE.Bundle.name()));
                	DocCapability.doDocumentation(artifactsMap.get(DocBase.DOCTYPE.Capability.name()));
                	DocCertificationDefinition.doDocumentation(artifactsMap.get(DocBase.DOCTYPE.CertificationDefinition.name()));
                	DocCertificationGroup.doDocumentation(artifactsMap.get(DocBase.DOCTYPE.CertificationGroup.name()));
                	DocConfiguration.doDocumentation(artifactsMap.get(DocBase.DOCTYPE.Configuration.name()));
                	DocCorrelationConfig.doDocumentation(artifactsMap.get(DocBase.DOCTYPE.CorrelationConfig.name()));
                	DocCustom.doDocumentation(artifactsMap.get(DocBase.DOCTYPE.Custom.name()));
                	DocDashboardContent.doDocumentation(artifactsMap.get(DocBase.DOCTYPE.DashboardContent.name()));
                	DocDictionary.doDocumentation(artifactsMap.get(DocBase.DOCTYPE.Dictionary.name()));                	
                	DocDynamicScope.doDocumentation(artifactsMap.get(DocBase.DOCTYPE.DynamicScope.name()));
                	DocEmailTemplate.doDocumentation(artifactsMap.get(DocBase.DOCTYPE.EmailTemplate.name()));
                	DocForm.doDocumentation(artifactsMap.get(DocBase.DOCTYPE.Form.name()));
                	DocFullTextIndex.doDocumentation(artifactsMap.get(DocBase.DOCTYPE.FullTextIndex.name()));
                	DocGroupDefinition.doDocumentation(artifactsMap.get(DocBase.DOCTYPE.GroupDefinition.name()));
                	DocGroupFactory.doDocumentation(artifactsMap.get(DocBase.DOCTYPE.GroupFactory.name()));
                	DocIdentityTrigger.doDocumentation(artifactsMap.get(DocBase.DOCTYPE.IdentityTrigger.name()));
                	DocIntegrationConfig.doDocumentation(artifactsMap.get(DocBase.DOCTYPE.IntegrationConfig.name()));
                	DocLocalizedAttribute.doDocumentation(artifactsMap.get(DocBase.DOCTYPE.LocalizedAttribute.name()));                	
                	DocObjectConfig.doDocumentation(artifactsMap.get(DocBase.DOCTYPE.ObjectConfig.name()));
                	DocPasswordPolicy.doDocumentation(artifactsMap.get(DocBase.DOCTYPE.PasswordPolicy.name()));                	
                	DocPolicy.doDocumentation(artifactsMap.get(DocBase.DOCTYPE.Policy.name()));
                	DocQuickLink.doDocumentation(artifactsMap.get(DocBase.DOCTYPE.QuickLink.name()));
                	DocQuickLinkOptions.doDocumentation(artifactsMap.get(DocBase.DOCTYPE.QuickLinkOptions.name()));                	
                	DocRequestDefinition.doDocumentation(artifactsMap.get(DocBase.DOCTYPE.RequestDefinition.name()));
                	DocRule.doDocumentation(artifactsMap.get(DocBase.DOCTYPE.Rule.name()));
                	DocRuleRegistry.doDocumentation(artifactsMap.get(DocBase.DOCTYPE.RuleRegistry.name()));
                	DocServiceDefinition.doDocumentation(artifactsMap.get(DocBase.DOCTYPE.ServiceDefinition.name()));
                	DocSPRight.doDocumentation(artifactsMap.get(DocBase.DOCTYPE.SPRight.name()));    
                	DocTargetSource.doDocumentation(artifactsMap.get(DocBase.DOCTYPE.TargetSource.name()));
                	DocTaskDefinition.doDocumentation(artifactsMap.get(DocBase.DOCTYPE.TaskDefinition.name()));
                	DocTaskSchedule.doDocumentation(artifactsMap.get(DocBase.DOCTYPE.TaskSchedule.name()));
                	DocUIConfig.doDocumentation(artifactsMap.get(DocBase.DOCTYPE.UIConfig.name()));
                	DocWorkflow.doDocumentation(artifactsMap.get(DocBase.DOCTYPE.Workflow.name()));
                	DocWorkgroup.doDocumentation(artifactsMap.get(DocBase.DOCTYPE.Identity.name()));

                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

            os = new FileOutputStream((destination.getAbsolutePath() + seperator + "overview-frame.html"));
            sw = new OutputStreamWriter(os);
            StringBuilder sb = new StringBuilder();

            HashMap<String,ArrayList<File>> artifactsMap = DocumentizerUtils.getArtifactsMap();
         //   for(Map.Entry<String, ArrayList<File>> entry : artifactsMap.entrySet()) {
            	
            	 Map<String, ArrayList<File>> treeMap = new TreeMap<String, ArrayList<File>>(artifactsMap);
            	 for(Map.Entry<String, ArrayList<File>> entry : treeMap.entrySet()) {
            	 String s = OBJECT_TYPE_TEMPLATE.replaceAll("\\{ObjectType}", entry.getKey());
                 sb.append(s);
            }

            sw.write(OBJECT_OVERVIEW_FRAME_TEMPLATE.replaceAll("\\{ObjectTypeList}", sb.toString()));

            sw.flush();
            sw.close();

        }
        catch(IOException e){
            e.printStackTrace();
        }
    }
}
