<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Workflow PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Workflow explicitTransitions="true" name="Workflow-Lifecycle-Reverse-Leaver" type="IdentityLifecycle">
  <Variable input="true" name="trigger">
    <Description>The IdentityTrigger</Description>
  </Variable>
  <Variable input="true" name="event" transient="true">
    <Description>
      The IdentityChangeEvent.  It can be used to build
      the provisioning plan, but does not need to be
      persisted with the case, so marked as transient.
    </Description>
  </Variable>
  <Variable initializer="false" name="trace">
    <Description>
      Used for debugging this workflow and when set to true trace
      will be sent to stdout.
    </Description>
  </Variable>
  <Variable input="true" name="identityName">
    <Description>The name of the identity.</Description>
  </Variable>
  <Variable initializer="Lifecycle" name="flow">
    <Description>The name of the identity.</Description>
  </Variable>
  <Variable initializer="string:LCM" name="source">
    <Description>The name of the identity.</Description>
  </Variable>
  <Variable initializer="script:resolveDisplayName(identityName)" input="true" name="identityDisplayName">
    <Description>
      The displayName of the identity being updated.
      Query for this using a projection query and fall back to the name.
    </Description>
  </Variable>
  <Variable name="spExtAttrs"/>
  <Variable initializer="string:true" name="foregroundProvisioning"/>
  <Variable editable="true" name="requestType"/>
  <Variable name="plan"/>
  <Variable name="project"/>
  <Variable input="true" name="workItemComments"/>
  <Variable name="provisioningErrors"/>
  <Description>Accelerator Pack Reverse Leaver Workflow</Description>
  <RuleLibraries>
    <Reference class="sailpoint.object.Rule" name="Rule-Reverse-Leaver-RuleLibrary"/>
    <Reference class="sailpoint.object.Rule" name="Rule-Framework-NotificationRuleLibrary"/>
    <Reference class="sailpoint.object.Rule" name="Rule-Framework-WrapperRuleLibrary"/>
  </RuleLibraries>
  <Step icon="Start" name="Start" posX="28" posY="10">
    <Transition to="Get Request Type"/>
  </Step>
  <Step name="Get Request Type" posX="98" posY="10" resultVariable="requestType">
    <Script>
      <Source><![CDATA[
        
        return getRequestTypeNameReverseTermination(context, workflow);
         
      ]]></Source>
    </Script>
    <Transition to="Build Plan"/>
  </Step>
  <Step name="Build Plan" posX="374" posY="10" resultVariable="plan">
    <Script>
      <Source><![CDATA[
        
            import sailpoint.rapidapponboarding.rule.ROADUtil;
            import sailpoint.object.ProvisioningPlan;
            import sailpoint.object.IdentityRequest;
            import sailpoint.object.Filter;
            import sailpoint.object.Identity;
            Filter filter =Filter.and(Filter.notnull("completionStatus"),Filter.ne("completionStatus", IdentityRequest.CompletionStatus.Failure),
            Filter.ne("executionStatus", IdentityRequest.ExecutionStatus.Terminated),Filter.ne("executionStatus", IdentityRequest.ExecutionStatus.Executing),
            Filter.eq("targetId", context.getObjectByName(Identity.class, identityName).getId()));
            String recentRequestLeaverId=ROADUtil.getRecentSailPointObjectId(context,filter,"IdentityRequest");
            ProvisioningPlan plan = buildReverseTerminationPlan(context, identityName, workflow,recentRequestLeaverId, project);
            return plan;
             
        ]]></Source>
    </Script>
    <Transition to="Notify Manager" when="plan == null || plan.getAccountRequests() == null || plan.getAccountRequests().size() &lt; 1"/>
    <Transition to="Process Plan"/>
  </Step>
  <Step icon="Task" name="Process Plan" posX="642" posY="10">
    <Arg name="flow" value="ref:flow"/>
    <Arg name="source" value="ref:source"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="identityDisplayName" value="ref:identityDisplayName"/>
    <Arg name="launcher" value="ref:launcher"/>
    <Arg name="plan" value="ref:plan"/>
    <Arg name="trace" value="ref:trace"/>
    <Arg name="requestType" value="ref:requestType"/>
    <Arg name="requestor" value="ref:requestor"/>
    <Arg name="foregroundProvisioning" value="ref:foregroundProvisioning"/>
    <Arg name="workItemComments" value="ref:workItemComments"/>
    <Return name="approvalSet" to="approvalSet"/>
    <Return name="project" to="project"/>
    <Return name="spExtAttrs" to="spExtAttrs"/>
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" name="Workflow-FrameWork-Wrapper"/>
    </WorkflowRef>
    <Transition to="Notify Manager" when="approvalSet.hasApproved();"/>
    <Transition to="Stop"/>
  </Step>
  <Step action="sendEmail" condition="script: ! Util.isNullOrEmpty(getIdentityNameForNotification(workflow,identityName, project, true))" icon="Default" name="Notify Manager" posX="917" posY="10">
    <Arg name="template">
      <Script>
        <Source><![CDATA[
            
            getWrapperEmailTemplateName(workflow, project, "ReverseLeaver");
             
        ]]></Source>
      </Script>
    </Arg>
    <Arg name="apDisableStaticManagerEmailContent">
      <Script>
        <Source><![CDATA[
                    
                      import sailpoint.rapidapponboarding.rule.ROADUtil;
                      return ROADUtil.getDisableFlagEmailContent(context);
                       
                ]]></Source>
      </Script>
    </Arg>
    <Arg name="dynamicAppContent">
      <Script>
        <Source><![CDATA[
                    
                    getDynamicTextEmailTemplate( project,"ReverseLeaver", requestType);
                     
                ]]></Source>
      </Script>
    </Arg>
    <Arg name="refIdentityDisplayName">
      <Script>
        <Source><![CDATA[
            
            getIdentityDisplayName(workflow,identityName, null, false);
             
        ]]></Source>
      </Script>
    </Arg>
    <Arg name="plan" value="ref:plan"/>
    <Arg name="recipientDisplayName">
      <Script>
        <Source><![CDATA[
            
            getIdentityDisplayName(workflow,identityName, project, true);
             
        ]]></Source>
      </Script>
    </Arg>
    <Arg name="to">
      <Script>
        <Source><![CDATA[
                
                getIdentityNameForNotification(workflow,identityName, project, true);
                 
            ]]></Source>
      </Script>
    </Arg>
    <Arg name="cc">
      <Script>
        <Source><![CDATA[
            
                import sailpoint.rapidapponboarding.rule.EmailNotificationRuleLibrary;
                Map resultMap = getProvisioningStatusMap(project);
                if (resultMap != null && resultMap.size() > 0)
                {
                    if ((boolean)resultMap.get("isProvgSuccessful"))
                    {
                    return EmailNotificationRuleLibrary.ccToContractorManager(context,identityName,true,requestType, plan,project);
                    }
                    else
                    {
                    return "";
                    }
                }
                
            ]]></Source>
      </Script>
    </Arg>
    <Arg name="requestId">
      <Script>
        <Source><![CDATA[
                    
                    getRequestId(plan);
                     
                ]]></Source>
      </Script>
    </Arg>
    <Arg name="provisioningErrors" value="ref:provisioningErrors"/>
    <Transition to="Terminate Pending Requests"/>
  </Step>
  <Step name="Terminate Pending Requests" posX="768" posY="10">
    <Script>
      <Source><![CDATA[
        
       import sailpoint.rapidapponboarding.rule.ROADUtil;
        ROADUtil.terminateXDaysPendingRequest(context,identityName);
         
      ]]></Source>
    </Script>
    <Transition to="Target Aggregation"/>
  </Step>
  <Step name="Target Aggregation" posX="768" posY="10">
    <Script>
      <Source><![CDATA[
        
       import sailpoint.rapidapponboarding.rule.WrapperRuleLibrary;
       import org.apache.commons.logging.Log;
        import org.apache.commons.logging.LogFactory;
        import sailpoint.rapidapponboarding.logger.LogEnablement;
       Log loggerTarget = LogFactory.getLog("rapidapponboarding.rules");
       try
        {
        WrapperRuleLibrary.targetAggregateApplicationNativeIdOnIdentity( context,0, identityName, requestType, plan);
        }
        catch (Exception ex)
        {
        LogEnablement.isLogErrorEnabled(loggerTarget,"Error Target Aggregate Reverse Leaver "+identityName+".."+ex.getMessage());
        }
         
      ]]></Source>
    </Script>
    <Transition to="Execute Reverse Leaver Post Rule"/>
  </Step>
  <Step name="Execute Reverse Leaver Post Rule">
    <Script>
      <Source><![CDATA[
        
      postReverseLeaverRule( identityName,  requestType, project);
      
    ]]></Source>
    </Script>
    <Transition to="Stop"/>
  </Step>
  <Step icon="Stop" name="Stop" posX="1186" posY="10"/>
</Workflow>