<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Workflow PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Workflow name="Batch Request Approve" type="Subprocess">
  <Variable input="true" name="identityName" required="true">
    <Description>
      The name of the identity object being modified.
    </Description>
  </Variable>
  <Variable input="true" name="batchRequestId">
    <Description>
      Batch request id.
    </Description>
  </Variable>
  <Variable initializer="false" name="autoReject"/>
  <Variable name="approvalTypes"/>
  <Variable name="currentApprovalType"/>
  <Variable name="currentIndex"/>
  <Variable initializer="BATCH REQUEST FEATURE" input="true" name="requestType"/>
  <Variable name="approvalTypeObj"/>
  <Variable name="workItemConfig"/>
  <Variable initializer="boolean:false" name="canceledWorkItem"/>
  <Variable initializer="boolean:false" name="expiredWorkItem"/>
  <Variable initializer="script:(identityDisplayName != void) ? identityDisplayName : resolveDisplayName(identityName)" input="true" name="identityDisplayName">
    <Description>
      The displayName of the identity being updated.
      This may be passed in, if not the script queries for this
      using a projection query and falls back to the name.
    </Description>
  </Variable>
  <Variable initializer="script:getIdentityProperty(identityName, &quot;id&quot;)" input="true" name="identityId">
    <Description>
      The id of the identity being updated.
    </Description>
  </Variable>
  <Variable input="true" name="identityRequestId">
    <Description>
       The ID of the IdentityRequest for this request.
    </Description>
  </Variable>
  <Variable name="tmpApprovalSet">
    <Description>
            Temporary and transient ApprovalSet used to hold filtered
            approval sets as we transition through the approval chain.
        </Description>
  </Variable>
  <Variable initializer="serial" input="true" name="approvalMode">
    <Description>
     A string that specifies how we should handle the approvals.
     By default this is serial since most of these request with
     the exception of manager transfers will have only one approver.
     parallel
       Approvals are processed concurrently and there must be consensus,
       we wait for all approvers to approve.  The first approver that
       rejects terminates the entire approval.
     parallelPoll
       Approvals are processed concurrently but consensus is not required.
       All approvals will be process, we don't stop if there any
       rejections.
     serial
       Approvals are processed one at a time and there must be consensus.
       The first approver that rejects terminates the entire approval.
     serialPoll
       Approvals are processed in order but consensus is not required.
       All approvals will be processed, we don't stop if there are any
       rejections.  In effect we are "taking a poll" of the approvers.
     any
      Approvals are processed concurrently, the first approver to
      respond makes the decision for the group.
    </Description>
  </Variable>
  <Variable input="true" name="fallbackApprover" required="true">
    <Description>
      A String that specifies the name of the Identity that will
      be assigned any approvals where the owner of the approver
      can't be resolved. Example if the scheme is "owner" and the
      application doesn't specify and owner.
    </Description>
  </Variable>
  <Variable input="true" name="securityOfficerName">
    <Description>
       The name of the identity that will be sent approvals
       during security officer approvals.
    </Description>
  </Variable>
  <Variable input="true" name="batchRequestApprover">
    <Description>
       Identity responsible for approving batch requests.
    </Description>
  </Variable>
  <Variable initializer="false" input="true" name="includeRejectedItemsInApprovalChain">
    <Description>
       When using multi approvalSchemes a flag to indicate if new
       approvals in the chain will include rejected items.
    </Description>
  </Variable>
  <Variable input="true" name="policyViolations">
    <Description>
       List of policy violations that were found during our initial policy scan.
       This list is passed into each work item so the approvers can see
       pending violations.
    </Description>
  </Variable>
  <Variable initializer="BatchOwner" input="true" name="flow"/>
  <Variable name="hasItems"/>
  <Variable input="true" name="trace">
    <Description>
      Used for debugging this subprocess and when set to true trace
      statements will be sent to stdout.
    </Description>
  </Variable>
  <Variable input="true" name="approvalSet" output="true">
    <Description>
       This attributes is set during the "Build Approval Set" step,
       which builds this list by going through the ProvisioningPlan
       to build the line items that need to be approved,
       This variable includes all ApprovalItems that are part of
       the request process and is updated during the AfterScript
       of the approval process by assimilating the decisions
       and comments from the Approvals copy of the ApprovalItem.
    </Description>
  </Variable>
  <Variable input="true" name="workItemComments">
    <Description>
       List of global workflow comments to be appended to the approval workitem.
    </Description>
  </Variable>
  <Variable input="true" name="priority">
    <Description>
      String version of WorkItem.level that will be used
      to set the priority of the workitems generated
      as part of any generated approvals.
    </Description>
  </Variable>
  <Description>Accelerator Pack Workflow</Description>
  <RuleLibraries>
    <Reference class="sailpoint.object.Rule" name="LCM Workflow Library"/>
    <Reference class="sailpoint.object.Rule" name="Rule-ApprovalFrameWorkLibrary"/>
    <Reference class="sailpoint.object.Rule" name="Rule-Framework-NotificationRuleLibrary"/>
  </RuleLibraries>
  <Step icon="Start" name="Start">
    <Transition to="Get Approval Types"/>
  </Step>
  <Step name="Get Approval Types" resultVariable="approvalTypes">
    <Script>
      <Source><![CDATA[
            import sailpoint.rapidapponboarding.rule.ApprovalRuleLibrary;
            return ApprovalRuleLibrary.getPossibleApprovalTypes(context, workflow);
        ]]></Source>
    </Script>
    <Transition to="Get Next Approval Type" when="script:approvalTypes != null &amp;&amp; approvalTypes.size() > 0"/>
    <Transition to="Auto Approve"/>
  </Step>
  <Step name="Get Next Approval Type" resultVariable="currentApprovalType">
    <Script>
      <Source><![CDATA[
            
            import sailpoint.rapidapponboarding.rule.ApprovalRuleLibrary;
            return ApprovalRuleLibrary.roadGetNextApprovalType(context,workflow, approvalTypes,this);
            
            ]]></Source>
    </Script>
    <Transition to="Temporary ApprovalSet" when="script:currentApprovalType != null"/>
    <Transition to="Cleanup"/>
  </Step>
  <Step icon="Task" name="Temporary ApprovalSet" resultVariable="tmpApprovalSet">
    <Script>
      <Source><![CDATA[
            
            return createTempApprovalset(approvalSet);
            
            ]]></Source>
    </Script>
    <Transition to="Batch Request Approval" when="script:!tmpApprovalSet.isEmpty()"/>
    <Transition to="Get Next Approval Type" when="script:approvalTypes != null"/>
    <Transition to="Cleanup"/>
  </Step>
  <Step icon="Approval" name="Batch Request Approval" posX="833" posY="59">
    <Approval mode="script:roadGetApprovalMode(context, workflow, currentApprovalType, tmpApprovalSet)" renderer="lcmWorkItemRenderer.xhtml" send="identityDisplayName,identityName">
      <AfterScript>
        <Source><![CDATA[
              if (item!=null){              
                if (item.getState()!=null){                 
                    if(item.getState().equals(WorkItem.State.Canceled))
                    {
                        workflow.put("canceledWorkItem",true);
                    }
                    if(item.isExpired()) {
                        workflow.put("expiredWorkItem",true);
                    }
                }
              }
              assimilateWorkItemApprovalSet(wfcontext, item, approvalSet);
              auditDecisions(item);
            ]]></Source>
      </AfterScript>
      <Arg name="approvalSet" value="ref:approvalSet"/>
      <Arg name="workItemIdentityRequestId" value="ref:identityRequestId"/>
      <Arg name="workItemPriority" value="ref:priority"/>
      <Arg name="workItemTargetClass" value="sailpoint.object.BatchRequest"/>
      <Arg name="workItemTargetId" value="ref:batchRequestId"/>
      <Arg name="workItemRequester" value="script:(requestor != null) ? requestor : launcher"/>
      <Arg name="workItemDescription" value="$(workItemConfig.workItemDescription) "/>
      <Arg name="workItemElectronicSignature" value="$(workItemConfig.electronicSignature)"/>
      <Arg name="workItemNotificationTemplate" value="$(workItemConfig.notifyEmailTemplate)"/>
      <Arg name="workItemHoursBetweenReminders" value="$(workItemConfig.hoursBetweenReminders)"/>
      <Arg name="workItemReminderTemplate" value="$(workItemConfig.reminderEmailTemplate)"/>
      <Arg name="workItemMaxReminders" value="$(workItemConfig.maxReminders)"/>
      <Arg name="workItemEscalationRule" value="$(workItemConfig.escalationRule)"/>
      <Arg name="workItemEscalationTemplate" value="$(workItemConfig.escalationEmailTemplate)"/>
      <Arg name="workItemHoursTillEscalation" value="$(workItemConfig.hoursTillEscalation)"/>
      <Arg name="workItemEscalationStyle" value="$(workItemConfig.escalationStyle)"/>
      <Arg name="workItemDisableNotification" value="$(workItemConfig.disableApprovalNotifications)"/>
      <Arg name="escalationType" value="$(workItemConfig.escalationType)"/>
      <Arg name="escalationSameLevelRule" value="$(workItemConfig.escalationSameLevelRule)"/>
      <Arg name="backgroundApprovalCompletion" value="script:true"/>
      <Arg name="backgroundApprovalCompletionIfLocked" value="script:true"/>
      <OwnerScript>
        <Source><![CDATA[
            
                import sailpoint.rapidapponboarding.rule.ROADUtil;
                import sailpoint.rapidapponboarding.rule.ApprovalRuleLibrary;   
                Object owner = ApprovalRuleLibrary.getWorkItemOwners(context, workflow, currentApprovalType, fallbackApprover,this);
                if (owner == null)
                {
                ROADUtil.roadDoAutoApprove(approvalSet,"Auto approve item not requiring approval","spadmin");
                }
                return owner;
                
                ]]></Source>
      </OwnerScript>
    </Approval>
    <Description>
     If approvalScheme contains batchRequest and the batchRequestApprover is
     non null this step will send items with decisions and comments
     from the cart for final decision.
    </Description>
    <Transition to="Notify on Rejection" when="script:isFalse(expiredWorkItem) &amp;&amp; (!approved || approvalSet.isAllRejected() || isTrue(canceledWorkItem))"/>
    <Transition to="Is Work Item Expired"/>
  </Step>
  <Step name="Is Work Item Expired" resultVariable="autoReject">
    <Script>
      <Source><![CDATA[
                import sailpoint.workflow.IdentityRequestLibrary;
                import sailpoint.rapidapponboarding.rule.ROADUtil;
                boolean result = false;
                result = ROADUtil.isRoadWorkItemExpired(wfcontext,context);
                if(result) {
                    //Auto Reject the approval set
                    ROADUtil.roadDoAutoReject(approvalSet, "Auto Rejected", "Auto rejected by IdentityIQ due to lack of approval");
                    //Add the auto reject approval set back to identity request
                    IdentityRequestLibrary.assimilateWorkItemApprovalSetToIdentityRequest(wfcontext, approvalSet);
                }
                return result;
            ]]></Source>
    </Script>
    <Transition to="Notify on Auto Rejection" when="script:isTrue(autoReject)"/>
    <Transition to="Get Next Approval Type" when="approvalTypes != null"/>
    <Transition to="Cleanup"/>
  </Step>
  <Step action="call:sendEmail" icon="Email" name="Notify on Auto Rejection">
    <Arg name="template">
      <Script>
        <Source><![CDATA[
                getWrapperEmailTemplateName(context, null, "AutoRejection");
            ]]></Source>
      </Script>
    </Arg>
    <Arg name="to">
      <Script>
        <Source><![CDATA[
                    getIdentityNameForNotification(workflow,launcher, null, false);
                ]]></Source>
      </Script>
    </Arg>
    <Arg name="approvalSet" value="ref:approvalSet"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="refIdentityDisplayName">
      <Script>
        <Source><![CDATA[
                getIdentityDisplayName(workflow,identityName, null, false);
            ]]></Source>
      </Script>
    </Arg>
    <Arg name="plan" value="ref:plan"/>
    <Arg name="recipientDisplayName">
      <Script>
        <Source><![CDATA[
                getIdentityDisplayName(workflow,launcher, null, false);
            ]]></Source>
      </Script>
    </Arg>
    <Transition to="Cleanup"/>
  </Step>
  <Step action="call:sendEmail" icon="Email" name="Notify on Rejection">
    <Arg name="template">
      <Script>
        <Source><![CDATA[
                getWrapperEmailTemplateName(context, null, "Rejection");
            ]]></Source>
      </Script>
    </Arg>
    <Arg name="to">
      <Script>
        <Source><![CDATA[
                    getIdentityNameForNotification(workflow,launcher, null, false);
                ]]></Source>
      </Script>
    </Arg>
    <Arg name="approvalSet" value="ref:approvalSet"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="refIdentityDisplayName">
      <Script>
        <Source><![CDATA[
                getIdentityDisplayName(workflow,identityName, null, false);
            ]]></Source>
      </Script>
    </Arg>
    <Arg name="plan" value="ref:plan"/>
    <Arg name="recipientDisplayName">
      <Script>
        <Source><![CDATA[
                getIdentityDisplayName(workflow,launcher, null, false);
            ]]></Source>
      </Script>
    </Arg>
    <Transition to="Cleanup"/>
  </Step>
  <Step name="Auto Approve">
    <Script>
      <Source><![CDATA[
            
            import sailpoint.rapidapponboarding.rule.ROADUtil;
            ROADUtil.roadDoAutoApprove(approvalSet,"Auto approve item not requiring approval","spadmin");
            
            ]]></Source>
    </Script>
    <Transition to="Cleanup"/>
  </Step>
  <Step name="Cleanup">
    <Script>
      <Source><![CDATA[
            
            workflow.put("approvalTypes", null);
            workflow.put("approvalTypeObj", null);
            workflow.put("workItemConfig", null);
            
            ]]></Source>
    </Script>
    <Transition to="end"/>
  </Step>
  <Step icon="Stop" name="end" posX="920" posY="1"/>
</Workflow>