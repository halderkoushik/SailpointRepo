<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Workflow PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Workflow libraries="Identity" name="Workflow-Intercept-Password" type="PasswordIntercept">
  <Variable initializer="false" name="trace">
    <Description>
      Used for debugging this workflow and when set to true trace
      will be sent to stdout.
    </Description>
  </Variable>
  <Variable input="true" name="identityName">
    <Description>The name of the identity.</Description>
  </Variable>
  <Variable input="true" name="launcher"/>
  <Variable input="true" name="requestor"/>
  <Variable initializer="LCM" name="source"/>
  <Variable initializer="Password Intercepted" name="workItemComments"/>
  <Variable initializer="Interceptor" name="flow">
    <Description>The name of the identity.</Description>
  </Variable>
  <Variable initializer="script:resolveDisplayName(identityName)" input="true" name="identityDisplayName">
    <Description>
      The displayName of the identity being updated.
      Query for this using a projection query and fall back to the name.
    </Description>
  </Variable>
  <Variable name="spExtAttrs"/>
  <Variable initializer="string:true" name="foregroundProvisioning"/>
  <Variable initializer="PASSWORD INTERCEPTOR FEATURE" name="requestType">
    <Description>
     </Description>
  </Variable>
  <Variable input="true" name="applicationName" required="true">
    <Description>
      Name of the Application where the password change was detected.
    </Description>
  </Variable>
  <Variable input="true" name="nativeIdentity" required="true">
    <Description>
      Name of the account on the Application where the password change was detected.
    </Description>
  </Variable>
  <Variable input="true" name="password" required="true">
    <Description>
      The new password, encrypted.
    </Description>
  </Variable>
  <Variable name="project">
    <Description>
      A ProvisionignProject compiled from the target list.
    </Description>
  </Variable>
  <Variable name="skipProcessing">
    <Description>
      If the password change has already been processed, set this flag and skip processing.
    </Description>
  </Variable>
  <Description>Accelerator Pack Password Interceptor Workflow</Description>
  <RuleLibraries>
    <Reference class="sailpoint.object.Rule" name="Rule-ChangePasswordRulesLibrary"/>
  </RuleLibraries>
  <Step icon="Start" name="start" posX="28" posY="15">
    <Transition to="Examine Password"/>
  </Step>
  <Step name="Examine Password" posX="61" posY="150">
    <Script>
      <Source><![CDATA[
        
        import java.util.List;
        import sailpoint.api.EncodingUtil;
        import sailpoint.object.Identity;
        import sailpoint.tools.Util;
        boolean skipProcessing = false;
        // If the password is the last one set in Identity password history, skip processing
        Identity ident = context.getObjectByName(Identity.class, identityName);
        if (ident != null) {
          String src = ident.getPasswordHistory();
          List history = Util.csvToList(src);
          if (history != null && !Util.isEmpty(history)) {
            //Either encrypted or hash value
            skipProcessing = EncodingUtil.isMatch(password, history.get(0), context);
          }
        }
        workflow.put("skipProcessing", skipProcessing);
        // optimistically update password history to prevent password interceptor looping
        if (!skipProcessing) {
          updatePasswordHistory(identityName, password, generateUnifiedPasswordPolicy(ident));
        }
        
      ]]></Source>
    </Script>
    <Transition to="end" when="script:(isTrue(skipProcessing))"/>
    <Transition to="Build Plan"/>
  </Step>
  <Step name="Build Plan" resultVariable="plan">
    <Script>
      <Source><![CDATA[
        
        import sailpoint.object.ProvisioningPlan;
        import sailpoint.rapidapponboarding.rule.WrapperRuleLibrary;
		//Make Sure Plan is not built out for Service Cubes
        //Make Sure it Checks  Intercepted Native Id for Primary and Secondary Detection 
        ProvisioningPlan plan=null;
        if(identityName!=void && identityName!=null && applicationName!=void && applicationName!=null && nativeIdentity!=void && nativeIdentity!=null && password!=void && password!=null)
        {
         	plan=WrapperRuleLibrary.buildInterceptorPlan(context,applicationName,identityName, nativeIdentity,password);
         	return plan;
        }
        else
        {
        	return plan;
        }
        
      ]]></Source>
    </Script>
    <Transition to="end" when="script:(plan==void || plan==null || plan.getAccountRequests() == null)"/>
    <Transition to="Synchronize Password"/>
  </Step>
  <Step icon="Task" name="Synchronize Password">
    <Arg name="flow" value="ref:flow"/>
    <Arg name="interceptedNativeId" value="ref:nativeIdentity"/>
    <Arg name="source" value="ref:source"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="identityDisplayName" value="ref:identityDisplayName"/>
    <Arg name="launcher" value="ref:launcher"/>
    <Arg name="requestor" value="ref:launcher"/>
    <Arg name="plan" value="ref:plan"/>
    <Arg name="trace" value="ref:trace"/>
    <Arg name="requestType" value="ref:requestType"/>
    <Arg name="requestor" value="ref:requestor"/>
    <Arg name="foregroundProvisioning" value="ref:foregroundProvisioning"/>
    <Arg name="workItemComments" value="ref:workItemComments"/>
    <Return name="approvalSet" to="approvalSet"/>
    <Return name="project" to="project"/>
    <Return name="spExtAttrs" to="spExtAttrs"/>
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" name="Workflow-FrameWork-Wrapper"/>
    </WorkflowRef>
    <Transition to="end"/>
  </Step>
  <Step icon="Stop" name="end" posX="535" posY="11"/>
</Workflow>