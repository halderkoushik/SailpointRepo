<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Workflow PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Workflow name="Identity Request Violation Review" type="Subprocess">
  <Variable initializer="false" name="trace">
    <Description>
      The name of the identity object being modified.
    </Description>
  </Variable>
  <Variable input="true" name="identityName" required="true">
    <Description>
      The name of the identity object being modified.
    </Description>
  </Variable>
  <Variable initializer="script:(identityDisplayName != void) ? identityDisplayName : resolveDisplayName(identityName)" input="true" name="identityDisplayName">
    <Description>
      The displayName of the identity being updated.
      This may be passed in, if not the script queries for this
      using a projection query and falls back to the name.
    </Description>
  </Variable>
  <Variable input="true" name="project" required="true">
    <Description>The provisioning plan ready to execute.</Description>
  </Variable>
  <Variable input="true" name="plan" required="true">
    <Description>The provisioning plan ready to execute.</Description>
  </Variable>
  <Variable input="true" name="source"/>
  <Variable input="true" name="optimisticProvisioning" required="true">
    <Description>
      Set to true to enable optimistic provisioning.  This will cause
      changes to the entitlements compiled from role assignments to be
      applied immediately to the identity cube rather than waiting
      for the next refresh/reaggregation after the provisioning system
      completes the request.
    </Description>
  </Variable>
  <Variable initializer="false" input="true" name="enableRetryRequest">
    <Description>
      When set to true it will disable the workflow retry loop and let the
      Provision step launch requests to handle the retries.  Enabling
      this flag will enable some older functionality.
    </Description>
  </Variable>
  <Variable name="policyViolations">
    <Description>
       List of policy violations that were found during our initial policy scan.
       This list is passed into each work item so the approvers can see
       pending violations.
    </Description>
  </Variable>
  <Variable input="true" name="policiesToCheck">
    <Description>
      A List of policies that should be checked. If this list is
      empty all violations will be checked. Used in combination
      with policyScheme.
    </Description>
  </Variable>
  <Variable input="true" name="policyScheme"/>
  <Variable input="true" name="asyncCacheRefresh">
    <Description>
      Set to true to enable asynchronous refresh of the policy and role
      caches.  This speeds up response time for the LCM user, but you
      may want to disable this during demonstrations after editing
      the role or policy models.  This may also be enabled globally
      in the system configuration.  This variable overrides the system
      configuration if it has a value.
    </Description>
  </Variable>
  <Variable input="true" name="workItemPriority">
    <Description>
      String version of WorkItem.level that will be used
      to set the priority of the IdentityRequest.
    </Description>
  </Variable>
  <Variable name="approvalSet">
    <Description>
       This attribute is passed in and contains the current
       set of approvalItems in the request. When a user chooses
       to remove a problematic approval item from the request, we
       update this value before returning to the calling workflow.
    </Description>
  </Variable>
  <Variable input="true" name="flow">
    <Description>
      The name of the LCM flow that launched this workflow.

      This is one of these values:

      AccountsRequest
      EntitlementsRequest
      RolesRequest
      IdentityCreateRequest
      IdentityEditRequest
      ForgotPassword
      ExpiredPassword
      PasswordRequest

    </Description>
  </Variable>
  <Variable input="true" name="allowRequestsWithViolations">
    <Description>
      If this variable is set to true, requesters will be able to proceed past
      the Policy Violation Review form without taking any action on
      policy violations resulting from the request.
    </Description>
  </Variable>
  <Variable input="true" name="requireViolationReviewComments">
    <Description>
      If true, requesters will be required to enter in comments if they
      proceed with a request that will result in policy violations.
     </Description>
  </Variable>
  <Variable name="violationReviewDecision">
    <Description>
       Decision made by the user in the Policy Violation Review step.
       This may be one of three choices:

       -ignore:   User is ignoring the violations and letting the request continue. If
                   requireViolationReviewComments=true the user will be required to enter
                   comments indicating why they are allowing the violations.

       -remediate: Indicates that the user removed the request items that were causing the
                   violations

       -cancel:   Indicates that the user decided to abandon the request, terminating the workflow.

    </Description>
  </Variable>
  <Variable name="workItemComments">
    <Description>
      Completion comments added if the user decides to proceed with the
      request without addressing the policy violations. These comments
      will be propagated to all other approvals.
    </Description>
  </Variable>
  <Variable name="originalPlan">
    <Description>
      The original plan calculated for the request.  As request modifications
      are submitted and resubmitted after violation review, we will revert to
      the original plan, so that the new selections can be calculated starting
      from a clean slate. 
    </Description>
  </Variable>
  <Description>
   This sub-process determines if there are any violations which will be
   caused by the request specified in the plan. If the policy scheme is
   'interactive' the user will be presented with a form which details
   the actions they can take to deal with the violations. Otherwise,
   control is returned to the calling process.
  </Description>
  <RuleLibraries>
    <Reference class="sailpoint.object.Rule" name="LCM Workflow Library"/>
  </RuleLibraries>
  <Step icon="Start" name="Start" posX="22" posY="13">
    <Transition to="Save Original Plan"/>
  </Step>
  <Step name="Save Original Plan" posX="118" posY="13">
    <Description>
      When a policyScheme of "interactive" is set, the user has an opportunity
      to resolve the violation by removing requests.  Multiple iterations of
      this form may be submitted.  Each submission must reset the plan so that
      when the plan is compiled anew with the new set of decisions, the
      original master plan is utilized.  This step saves that master plan.
      It is reloaded in the "Reset Original Plan" step.
    </Description>
    <Script>
      <Source><![CDATA[
        import sailpoint.object.ProvisioningPlan;
        
        if (null != project) {
            ProvisioningPlan master = project.getMasterPlan();
            if (null != master) {
                ProvisioningPlan copy = (ProvisioningPlan) master.deepCopy(wfcontext.getSailPointContext());
                workflow.put("originalPlan", copy);
            }
        }
      ]]></Source>
    </Script>
    <Transition to="Check Policies"/>
  </Step>
  <Step action="checkPolicyViolations" icon="Task" name="Check Policies" posX="220" posY="13" resultVariable="policyViolations">
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="project" value="ref:project"/>
    <Arg name="policies" value="ref:policiesToCheck"/>
    <Arg name="policyScheme" value="ref:policyScheme"/>
    <Arg name="asyncCacheRefresh" value="ref:asyncCacheRefresh"/>
    <Return name="policyViolations" to="policyViolations"/>
    <Transition to="Reset Original Plan" when="script:((!&quot;ignore&quot;.equals(violationReviewDecision) &amp;&amp; !&quot;cancel&quot;.equals(violationReviewDecision) ) &amp;&amp; size(policyViolations) > 0 &amp;&amp; (policyScheme.equals(&quot;interactive&quot;)))"/>
    <Transition to="end"/>
  </Step>
  <Step name="Reset Original Plan" posX="378" posY="9">
    <Description>
      In this step, we need to reload the original plan because previous
      decisions may have modified the plan, so start with the original complete
      plan.  Also see the step "Save Original Plan".
    </Description>
    <Script>
      <Source><![CDATA[
        if (null != originalPlan) {
            plan = (ProvisioningPlan) originalPlan.deepCopy(wfcontext.getSailPointContext());
            workflow.put("plan", plan);
        }
      ]]></Source>
    </Script>
    <Transition to="Violation Review"/>
  </Step>
  <Step icon="Approval" name="Violation Review" posX="446" posY="210">
    <Approval mode="ref:approvalMode" owner="ref:launcher" renderer="lcmViolationReviewRenderer.xhtml" send="identityDisplayName,identityName,policyViolations,approvalSet,violationReviewDecision,requireViolationReviewComments,allowRequestsWithViolations">
      <AfterScript>
        <Source><![CDATA[
          import sailpoint.object.ApprovalSet;
          import sailpoint.object.ApprovalItem;
          import sailpoint.object.WorkItem;
          import sailpoint.object.ProvisioningPlan;
          import sailpoint.object.Comment;


          if (item == null) {
              return;
          }

          workflow.put("violationReviewDecision", item.get("violationReviewDecision"));
          
          // Assimilate all of the approvalItem changes into our global
          // approval set
          ApprovalSet set = (ApprovalSet)item.get("approvalSet");
          if ( set != null ) {
              // Global completion comments will apply to each of the items
              // If there are completion comments append them
              // to any other completion comments, but typically its 
              // one or the other
              String completionComments = item.getCompletionComments();
              Identity id = item.getOwner();
              String ownerName = null;
              if ( id != null ) {
                  ownerName = id.getName();
              }
              approvalSet.assimilate(set, ownerName, completionComments, false);
          } else {
              throw new GeneralException("ApprovalSet not found in afterscript.");
          }
          
          assimilateWorkItemApprovalSet(wfcontext, item, approvalSet);
        ]]></Source>
      </AfterScript>
      <Arg name="workItemRequester" value="$(launcher)"/>
      <Arg name="workItemDescription" value="Policy Violation Review - Account Changes for User: $(identityDisplayName)"/>
      <Arg name="workItemPriority" value="ref:workItemPriority"/>
      <Arg name="workItemType" value="ViolationReview"/>
    </Approval>
    <Description>
      Give the user the option of either removing problematic request items, or
      affirm that they are aware of the violations and wish to continue.
    </Description>
    <Transition to="Handle Violation Review Decision"/>
  </Step>
  <Step icon="Task" name="Handle Violation Review Decision" posX="248" posY="210">
    <Description>

    </Description>
    <Transition to="Process Violation Review Decisions"/>
  </Step>
  <Step action="call:processPlanApprovalDecisions" icon="Task" name="Process Violation Review Decisions" posX="60" posY="210" resultVariable="plan">
    <Arg name="approvalSet" value="ref:approvalSet"/>
    <Arg name="plan" value="ref:plan"/>
    <Arg name="disableAudit" value="true"/>
    <Description>
      Process the decisions made by the user. This will update the plan by removing
      any items that were rejected by the user.
    </Description>
    <Transition to="Compile Project"/>
  </Step>
  <Step action="compileProvisioningProject" icon="Task" name="Compile Project" posX="114" posY="134" resultVariable="project">
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="plan" value="ref:plan"/>
    <Arg name="requester" value="ref:launcher"/>
    <Arg name="source" value="ref:source"/>
    <Arg name="disableRetryRequest" value="!ref:enableRetryRequest"/>
    <Arg name="optimisticProvisioning" value="ref:optimisticProvisioning"/>
    <Description>Recompile the provisioning plan into a provisioning project, taking into
      consideration any items removed on the violation review form.</Description>
    <Transition to="Save Original Plan"/>
    <Transition to="end" when="script:(&quot;cancel&quot;.equals(violationReviewDecision) || &quot;ignore&quot;.equals(violationReviewDecision))"/>
  </Step>
  <Step icon="Stop" name="end" posX="288" posY="131"/>
</Workflow>