<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE TaskDefinition PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<TaskDefinition executor="sailpoint.reporting.LiveReportExecutor" name="Revocation Live Report" progressMode="Percentage" resultAction="Rename" subType="Administration Reports" template="true" type="LiveReport">
  <Attributes>
    <Map>
      <entry key="report">
        <value>
          <LiveReport title="Revocation Report">
            <DataSource objectType="CertificationItem" type="Filter">
              <QueryParameters>
                <Parameter argument="remediationKickedOff" defaultValue="true" property="action.remediationKickedOff" valueClass="boolean"/>
                <Parameter argument="type" property="parent.certification.type" valueClass="sailpoint.object.Certification$Type"/>
                <Parameter argument="tags" property="parent.certification.tags.id"/>
                <Parameter argument="certificationGroups" property="parent.certification.certificationGroups.id"/>
                <Parameter argument="applications">
                  <QueryScript>
                    <Source><![CDATA[
                            
                            import sailpoint.object.*;
                            import sailpoint.api.ObjectUtil;
                            import java.util.*;

                            if (value != null){
                              List appNames = ObjectUtil.convertIdsToNames(context, Application.class, value);
                              if (appNames != null && !appNames.isEmpty()){
                                List filters = new ArrayList();
                                for(String appName : appNames){
                                  List appList = new ArrayList();
                                  appList.add(appName);
                                  filters.add(Filter.containsAll("applicationNames", appList));
                                }
                                queryOptions.addFilter(Filter.or(filters));
                              }
                            }

                            return queryOptions;
                            
                          ]]></Source>
                  </QueryScript>
                </Parameter>
                <Parameter argument="groups">
                  <QueryScript>
                    <Source><![CDATA[
                            import sailpoint.reporting.*;
                            import sailpoint.object.*;

                            Filter f = ReportingLibrary.getGroupDefinitionFilter(context, value, true);
                            if(f!=null) {
                              queryOptions.addFilter(Filter.join("parent.identity", "Identity.name"));
                              queryOptions.addFilter(f);
                            }
                            return queryOptions;
                          ]]></Source>
                  </QueryScript>
                </Parameter>
                <Parameter argument="creationStartDate" operation="GT" property="parent.certification.created"/>
                <Parameter argument="creationEndDate" operation="LT" property="parent.certification.created"/>
                <Parameter argument="signedStartDate" operation="GT" property="parent.certification.signed"/>
                <Parameter argument="signedEndDate" operation="LT" property="parent.certification.signed"/>
                <Parameter argument="expirationStartDate" operation="GT" property="parent.certification.expiration"/>
                <Parameter argument="expirationEndDate" operation="LT" property="parent.certification.expiration"/>
              </QueryParameters>
            </DataSource>
            <ReportForm>
              <Reference class="sailpoint.object.Form" name="Revocation Report Form"/>
            </ReportForm>
            <Columns>
              <ReportColumnConfig field="status" header="rept_remediation_progress_grid_col_status" property="action.remediationCompleted" sortable="true" width="110">
                <RenderScript>
                  <Source><![CDATA[
                          import sailpoint.tools.Message;
                          import sailpoint.web.messages.MessageKeys;
                          return value == true ? Message.localize(MessageKeys.WORK_ITEM_STATE_FINISHED) : Message.localize(MessageKeys.WORK_ITEM_STATE_OPEN);
                        ]]></Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="recipient" header="rept_remediation_progress_grid_col_recipient" property="action.ownerName" sortable="true" width="110"/>
              <ReportColumnConfig field="requestor" header="rept_remediation_progress_grid_col_requester" property="action.actorName" sortable="true" width="110"/>
              <ReportColumnConfig field="type" header="rept_remediation_progress_grid_col_type" property="action" sortable="true" width="110">
                <RenderScript>
                  <Source><![CDATA[
                          
                          import sailpoint.object.*;
                          Object returnValue = null;
                          if(value != null && value.getRemediationAction() != null) {
                            if (value.getRemediationAction().equals(CertificationAction.RemediationAction.SendProvisionRequest)) {
                              ProvisioningPlan plan = value.getRemediationDetails();
                              if(plan != null && plan.getAccountRequests() !=null) {
                                    if(!plan.getAccountRequests().isEmpty()) {
                                        returnValue = plan.getAccountRequests().get(0).getTargetIntegration();
                                    }
                              }
                              else 
                                 returnValue = null;
                            }

                            if (null == returnValue)
                              returnValue = value.getRemediationAction();

                            return returnValue;
                          }
                          
                        ]]></Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="requestId" header="rept_remediation_progress_grid_col_requestID" property="action" sortable="true" width="110">
                <RenderScript>
                  <Source><![CDATA[
                          
                            import sailpoint.object.*;
                             if(value!=null) {
                                ProvisioningPlan plan = value.getRemediationDetails();
                                if(plan!=null && plan.getAccountRequests()!=null && !plan.getAccountRequests().isEmpty())
                                  return plan.getAccountRequests().get(0).getRequestID();
                             }

                            return null;
                          
                        ]]></Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="expiration" header="rept_remediation_progress_grid_col_expiration" property="parent.certification.expiration" sortable="true" width="110"/>
              <ReportColumnConfig field="identity" header="rept_remediation_progress_grid_col_identity" property="parent.identity" scriptArguments="type,targetName" sortable="true" width="110">
                <RenderScript>
                  <Source><![CDATA[
                          import sailpoint.object.*;
                          CertificationItem.Type type = scriptArgs.get("type");
                          if(type.equals(CertificationItem.Type.AccountGroupMembership) || type.equals(CertificationItem.Type.DataOwner)) {
                              return scriptArgs.get("targetName");
                          } else {
                              return value;
                          }
                        ]]></Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="account" header="rept_remediation_progress_grid_col_account" property="exceptionEntitlements.displayName" scriptArguments="policyViolation" sortable="true" width="110">
                <RenderScript>
                  <Source><![CDATA[
                          
                            import sailpoint.object.*;
                            import sailpoint.policy.*;
                            import sailpoint.tools.*;
                            if(value!=null)
                                return value;

                            PolicyViolation violation = scriptArgs.get("policyViolation");
                            if(violation != null) {
                                if(violation.getArgument(AccountPolicyExecutor.VIOLATION_ACCOUNTS)!=null) {
                                    return Util.listToCsv((List)violation.getArgument(AccountPolicyExecutor.VIOLATION_ACCOUNTS));
                                }
                            }
                          
                        ]]></Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="application" header="rept_remediation_progress_grid_col_application" property="exceptionEntitlements.application" scriptArguments="policyViolation" sortable="true" width="110">
                <RenderScript>
                  <Source><![CDATA[
                          
                            import sailpoint.object.*;
                            import sailpoint.tools.Util;
                            if(value!=null)
                                return value;

                            PolicyViolation violation = scriptArgs.get("policyViolation");
                            if(violation != null && violation.getRelevantApps() != null) {
                                return Util.listToCsv(violation.getRelevantApps());
                            }
                          
                        ]]></Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="instance" header="rept_certification_col_instance" property="exceptionEntitlements.instance" sortable="true" width="110"/>
              <ReportColumnConfig field="entitlement" header="rept_remediation_progress_grid_col_entitlement" property="exceptionEntitlements" scriptArguments="bundle,violationSummary,targetName" width="110">
                <RenderScript>
                  <Source><![CDATA[
                          import sailpoint.reporting.*;
                          return ReportingLibrary.describeCertificationEntitlement(value, null, scriptArgs.get("violationSummary"), scriptArgs.get("targetName"));
                        ]]></Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="newValue" header="rept_remediation_progress_grid_col_newValue" property="action" width="110">
                <RenderScript>
                  <Source><![CDATA[
                          import sailpoint.reporting.datasource.*;
                          return DataSourceUtil.getRemediationModifiableNewValue(value);
                        ]]></Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="accessReviewName" header="rept_remediation_progress_grid_col_accessReview" property="parent.certification.name" width="110"/>
              <ReportColumnConfig field="requestComments" header="rept_remediation_progress_detail_requester_comments" property="action.comments" width="110"/>
              <ReportColumnConfig field="completionComments" header="rept_remediation_progress_detail_completion_comments" property="action.completionComments" width="110"/>
            </Columns>
          </LiveReport>
        </value>
      </entry>
    </Map>
  </Attributes>
  <Description>Displays information about all revocations in the system and how they have been handled in detailed format.</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="FullAccessRemediationProgressReport"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument multi="true" name="tags" type="Tag"/>
      <Argument multi="true" name="groups" type="GroupDefinition">
        <Description>rept_input_cert_report_groups</Description>
      </Argument>
      <Argument multi="true" name="certificationGroups" type="CertificationGroup"/>
      <Argument multi="true" name="applications" type="Application">
        <Description>rept_input_remed_progr_report_apps</Description>
      </Argument>
      <Argument name="creationStartDate" type="date">
        <Description>rept_input_remed_progr_report_create_dt_start</Description>
      </Argument>
      <Argument name="creationEndDate" type="date">
        <Description>rept_input_remed_progr_report_create_dt_end</Description>
      </Argument>
      <Argument name="signedStartDate" type="date">
        <Description>rept_input_remed_progr_report_signed_date_start</Description>
      </Argument>
      <Argument name="signedEndDate" type="date">
        <Description>rept_input_remed_progr_report_signed_date_end</Description>
      </Argument>
      <Argument name="expirationStartDate" type="date">
        <Description>rept_input_remed_progr_report_exp_dt_start</Description>
      </Argument>
      <Argument name="expirationEndDate" type="date">
        <Description>rept_input_remed_progr_report_exp_dt_end</Description>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>