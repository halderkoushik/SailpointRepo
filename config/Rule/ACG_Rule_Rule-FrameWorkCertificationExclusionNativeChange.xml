<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="Rule-FrameWorkCertificationExclusionNativeChange" type="CertificationExclusion">
  <Description>Excludes Entitlements/Roles from the Certification if they
		match the exclusion criteria of the
		corresponding Custom object.
	</Description>
  <Signature returnType="String">
    <Inputs>
      <Argument name="log">
        <Description>
					The log object associated with the SailPointContext.
				</Description>
      </Argument>
      <Argument name="context">
        <Description>
					A sailpoint.api.SailPointContext object that can be used to query
					the database if necessary.
				</Description>
      </Argument>
      <Argument name="entity" type="AbstractCertifiableEntity">
        <Description>
					The AbstractCertifiableEntity that is part of the certification.
					Currently, this is either an Identity, Entitlement, or Role.
				</Description>
      </Argument>
      <Argument name="certification" type="Certification">
        <Description>
					The certification that this identity is part of.
				</Description>
      </Argument>
      <Argument name="certContext" type="CertificationContext">
        <Description>
					The CertificationContext that is being used to generate the
					certification.
				</Description>
      </Argument>
      <Argument name="items" type="List">
        <Description>
					List of Certifiable items that are currently part of the
					certification for this identity. Any items that should be excluded
					from the certification should be deleted from this list and added
					to the itemsToExclude list.
				</Description>
      </Argument>
      <Argument name="itemsToExclude" type="List">
        <Description>
					A List of Certifiable items that should not be included in the
					certification. This list will be empty when the rule is executed
					and any items that should not be part of the certification should
					be moved from the items list to the itemsToExclude list.
				</Description>
      </Argument>
      <Argument name="state">
        <Description>
					A Map containing state information.
				</Description>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="explanation" type="String">
        <Description>
					An optional explanation describing why the items were excluded.
				</Description>
      </Argument>
    </Returns>
  </Signature>
  <Source><![CDATA[
	
	import sailpoint.object.Certifiable;
	import sailpoint.object.EntitlementGroup;
	import sailpoint.object.Entitlement;
	import sailpoint.object.Attributes;
	import sailpoint.object.Bundle;
	import sailpoint.object.Custom;
	import sailpoint.object.CustomGlobal;
	import sailpoint.object.Identity;
	import sailpoint.object.Application;
	import sailpoint.object.ManagedAttribute;
	import sailpoint.object.Filter;
	import sailpoint.object.QueryOptions;
	import sailpoint.tools.Util;
	import sailpoint.api.SailPointContext;
	import sailpoint.api.IdentityService;
	import org.apache.commons.logging.Log;
	import org.apache.commons.logging.LogFactory;
	import sailpoint.object.CertificationItem;
	import sailpoint.object.RoleAssignment;
	import sailpoint.tools.GeneralException;
	import sailpoint.object.ObjectConfig;
	import sailpoint.object.NativeChangeDetection;
	import sailpoint.object.Difference;
	import sailpoint.rapidapponboarding.rule.WrapperRuleLibrary;
	import sailpoint.rapidapponboarding.rule.ROADUtil;
	import sailpoint.rapidapponboarding.rule.CertificationRuleLibrary;
	import sailpoint.rapidapponboarding.rule.NativeChangeRuleLibrary;
	import sailpoint.rapidapponboarding.logger.LogEnablement;
	Log logger = LogFactory.getLog("rapidapponboarding.rules");
	List appsFound = new ArrayList();
	public boolean excludeEntitlement(Certifiable certObj, Identity identity) {
	 	LogEnablement.isLogDebugEnabled(logger,"Enter Native Change excludeEntitlement: ");
		String appName = "";
		String entName = "";
		Object entValue = "";
		String nativeId="";
		boolean excludeItem = true;
		LogEnablement.isLogDebugEnabled(logger,"Enter excludeEntitlement");
		//First check if this is an entitlement
		if(certObj instanceof EntitlementGroup) 
		{
			LogEnablement.isLogDebugEnabled(logger,"...EntitlementGroup");
			EntitlementGroup entGrp = (EntitlementGroup) certObj;
			//Obtain the entitlement name and its corresponding application
			if(!entGrp.isAccountOnly() && entGrp.getAttributes() != null) 
			{
					appName = entGrp.getApplicationName();
					LogEnablement.isLogDebugEnabled(logger,"...appName.."+appName);
					nativeId=entGrp.getNativeIdentity();
					LogEnablement.isLogDebugEnabled(logger,"...nativeId.."+nativeId);
					entName = entGrp.getAttributeNames().get(0);
					LogEnablement.isLogDebugEnabled(logger,"...entName..."+entName);
					entValue = entGrp.getAttributes().get(entName);
					LogEnablement.isLogDebugEnabled(logger,"...entValue"+entValue);
					if (appName != null && entName != null && entValue != null && nativeId!=null) 
					{
						if (!appsFound.contains(appName)) 
						{
							appsFound.add(appName);
						}
						List list = NativeChangeRuleLibrary.getNativeChanges(context,identity, appName, nativeId);
						LogEnablement.isLogDebugEnabled(logger,"List of Native Changes: "+list);
						if (list != null && !list.isEmpty()) 
						{
							for(HashMap map:list)
							{
							    Object configEntValue=map.get(nativeId+entName);
							    if(configEntValue!=null && configEntValue instanceof String && entValue instanceof String)
							    {
								    if(((String)configEntValue).equalsIgnoreCase((String)entValue))
								    {
								    excludeItem = false;
								    LogEnablement.isLogDebugEnabled(logger,"Entitlement: " + entValue + " needs to be reviewed");
									return excludeItem;
								    }
							    }
							    else if(configEntValue!=null && configEntValue instanceof List && entValue instanceof String)
							    {
								    if(((List)configEntValue).contains((String)entValue))
								    {
								    excludeItem = false;
								    LogEnablement.isLogDebugEnabled(logger,"Entitlement: " + entValue + " needs to be reviewed");
									return excludeItem;
								    }
							    }
							    else
							    {
							    	LogEnablement.isLogDebugEnabled(logger,"Exclude Entitlement : "+configEntValue);
							    }
							}
						}
						else
						{
						LogEnablement.isLogDebugEnabled(logger,"Exclude Entitlement : "+entValue);
						}
					}
			}
			else if(entGrp.isAccountOnly())
			{
				appName = entGrp.getApplicationName();
				LogEnablement.isLogDebugEnabled(logger,"...appName..."+appName);
				nativeId=entGrp.getNativeIdentity();
				LogEnablement.isLogDebugEnabled(logger,"...nativeId..."+nativeId);
				if (appName != null  && nativeId!=null) 
				{
					if (!appsFound.contains(appName)) 
					{
						appsFound.add(appName);
					}
					List list = NativeChangeRuleLibrary.getNativeChanges(context,identity, appName, nativeId);
					if (list != null && !list.isEmpty()) 
					{
						for(HashMap map:list)
						{
						    Object accountValue=map.get(nativeId);
						    LogEnablement.isLogDebugEnabled(logger,"accountValue: " + accountValue);
						    if(accountValue!=null)
						    {
						            //Account Native Id is Present in Configuration Object - Native Account Creation
								    excludeItem = false;
								    LogEnablement.isLogDebugEnabled(logger,"Account: " + nativeId + " needs to be reviewed");
									return excludeItem;
						    }
						}
					}
				}
			}
		} 
      LogEnablement.isLogDebugEnabled(logger,"Entitlement: " + entValue + " does not need to be reviewed");
	  return excludeItem;
	}
	/**
	 * Get Identity Native Changes and Store them in a configuration artifact "Certification-NativeChange"
	 * In case of LifeCycleEvent Worklfow, NativeChange Detections are saved in to the configuration object in a workflow
	 * @param identity
	 */
	public void getNativeChangesFromIdentity(Identity identity, boolean managePrivilegedAccessOnly) 
	{
	    LogEnablement.isLogDebugEnabled(logger,"Start getNativeChangesFromIdentity");
	    if(identity!=null)
	    {
		    List allNativeChanges=identity.getNativeChangeDetections();
		    LogEnablement.isLogDebugEnabled(logger,"allNativeChanges..."+allNativeChanges);
		    if(allNativeChanges!=null)
		    {
		      String identityName=identity.getName();
		      for (NativeChangeDetection singleChange : allNativeChanges)
		      {
	    	     if (singleChange.getDifferences() != null) 
	             {
	            		if (singleChange.getApplicationName() != null && singleChange.getNativeIdentity() != null) 
		        		{	        		
			               String  applicationName = singleChange.getApplicationName();
		        		   String  nativeId = singleChange.getNativeIdentity();
	               		   List allDifferces = singleChange.getDifferences();
	               		   if (applicationName != null && !applicationName.equals("") && allDifferces != null && !allDifferces.isEmpty()) 
						    {
							    //Need to include native identity for ncdKey - there could be multiple accounts
								String ncdKey = "NCD%" + identityName + "%" + applicationName;
								//On set of entitlements / difference
								List allEnts = new ArrayList();
								allEnts=NativeChangeRuleLibrary.getListOfDifferences(context,allDifferces, managePrivilegedAccessOnly, nativeId, applicationName);
								LogEnablement.isLogDebugEnabled(logger,"allEnts..."+allEnts);
								if(allEnts!=null && allEnts.size()>0)
								{
									WrapperRuleLibrary.setNativeChangeKeyValue(context,ncdKey, allEnts);
								}
							}
	               		}
	              }
		      }
		    }
	    }
		LogEnablement.isLogDebugEnabled(logger,"End getNativeChangesFromIdentity");
	}
	boolean managePrivilegedAccessOnly=false;
	managePrivilegedAccessOnly=NativeChangeRuleLibrary.isOnlyPrivilegdAccessInclusion(context);
	LogEnablement.isLogDebugEnabled(logger,"...managePrivilegedAccessOnly.."+managePrivilegedAccessOnly);
	String explanation = "";
	Identity currentIdentity = (Identity) entity;
	// Skip RoleAssignments that are not correctly defined on Identity Cube anymore
	items.removeAll(Collections.singleton(null));
	//Iterate through the certifiable items and check if each one is in the exclusion list
	if (currentIdentity != null) 
	{
		getNativeChangesFromIdentity(currentIdentity,managePrivilegedAccessOnly);
		Iterator it = items.iterator();
		while(it.hasNext())
		{
			Certifiable certObj = it.next();
			//Check if this certification object is in the list of exclusions
			if(excludeEntitlement(certObj, currentIdentity)) {
				itemsToExclude.add(certObj);
				it.remove();
				explanation = "Entitlement not part of Native Change Detection";
			}
		}
		String ncdKey = "";
		for (String appName : appsFound) 
		{
			ncdKey = "NCD%" + currentIdentity.getName() + "%" + appName;
			if (WrapperRuleLibrary.getNativeChangeKeyValue(context,ncdKey) != null) 
			{
			   // Clean UP configuration object Certification-NativeChange
				WrapperRuleLibrary.deleteNativeChangeKeyValue(context,ncdKey);
			}
		}
	}
	return explanation;
	
	]]></Source>
</Rule>