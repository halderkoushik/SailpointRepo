<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="Rule-FrameWork-Preiterate-DelimitedFile" type="PreIterate">
  <Description>This rule is called before the connector processes the data in a file.</Description>
  <Signature returnType="void">
    <Inputs>
      <Argument name="log">
        <Description>
          The log object associated with the SailPointContext.
        </Description>
      </Argument>
      <Argument name="context">
        <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
      </Argument>
      <Argument name="application">
        <Description>
          Application being iterated.
        </Description>
      </Argument>
      <Argument name="schema">
        <Description>
          Schema representing the data being iterated.
        </Description>
      </Argument>
      <Argument name="stats">
        <Description>
          A map passed by the connector of the stats for the file about to be iterated.
          Contains keys:
            fileName : (String) filename of the file about to be processed
            absolutePath : (String) absolute filename
            length : (Long) length in bytes
            lastModified : (Long) last time the file was updated Java GMT
        </Description>
      </Argument>
    </Inputs>
  </Signature>
  <Source><![CDATA[
  import sailpoint.rapidapponboarding.flatfile.ApplicationService;
  import sailpoint.tools.GeneralException;
  import sailpoint.connector.DelimitedFileConnector;
  import org.apache.commons.logging.Log;
  import org.apache.commons.logging.LogFactory;  
  import java.io.BufferedInputStream;
  import sailpoint.rapidapponboarding.logger.LogEnablement;
  import sailpoint.rapidapponboarding.rule.AggregationRuleLibrary;
  Log preIterateLogger = LogFactory.getLog("rapidapponboarding.rules");
  LogEnablement.isLogDebugEnabled(preIterateLogger,"Entering Pre Iterate Rule" ); 
  HashMap params = new HashMap();
  params.put("context", context);
  params.put("application", application);
  params.put("schema", schema);
  params.put("stats", stats); 
  try{
    AggregationRuleLibrary.runPreIterateRule(context,application,schema,stats,params);
  	// Instance of ApplicationService
  	ApplicationService appService = new ApplicationService(context);
  	// First check to see if the files pass validation
  	LogEnablement.isLogDebugEnabled(preIterateLogger,"Start Validate Schema" );  	
  	String message = appService.validateAppSchema(application, schema);
  	LogEnablement.isLogDebugEnabled(preIterateLogger,"End Validate Schema "+message );  	
  	if(message != null)
  	{
  		throw new GeneralException(message);
  	} 
  	// Now test whether the identity attribute in the file needs to be converted to upper case
  	String needsConversion = "CONVERT"; 
  	if(application.getBooleanAttributeValue(DelimitedFileConnector.CONFIG_MERGE_ROWS) && needsConversion.equalsIgnoreCase("CONVERT"))
  	{
  		if(!application.getBooleanAttributeValue(DelimitedFileConnector.CONFIG_IS_SORTED))
  		{
  			LogEnablement.isLogDebugEnabled(preIterateLogger,"Start Conversion" );  	
  		    BufferedInputStream bIStre=appService.convertIdAttrInFile(application, schema);
  		    LogEnablement.isLogDebugEnabled(preIterateLogger,"End Conversion" );  	
  		    if(bIStre!=null)
  		    {
  				return bIStre;
  			}
  		}
  	}
  } 
  catch(Exception ex)
  {
  	throw new GeneralException("ERROR:An exception was thrown while attempting to process preiterate rule", ex);
  }
  ]]></Source>
</Rule>