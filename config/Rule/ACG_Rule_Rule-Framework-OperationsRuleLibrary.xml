<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="Rule-Framework-OperationsRuleLibrary">
  <Description>A rule used by a Workflow to determine a step action or variable value.
	Note that an Attributes map of all variables from the current WorkflowContext,
	merged with the arguments from the  Step, is also passed into the workflow rule .</Description>
  <Signature returnType="Object">
    <Inputs>
      <Argument name="log">
        <Description>
          The log object associated with the SailPointContext.
        </Description>
      </Argument>
      <Argument name="context">
        <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
      </Argument>
      <Argument name="wfcontext">
        <Description>
          The current WorkflowContext.
        </Description>
      </Argument>
      <Argument name="handler">
        <Description>
          The workflow handler associated with the current WorkflowContext.
        </Description>
      </Argument>
      <Argument name="workflow">
        <Description>
          The current Workflow definition.
        </Description>
      </Argument>
      <Argument name="step">
        <Description>
          The current Step.
        </Description>
      </Argument>
      <Argument name="approval">
        <Description>
          The current Approval.
        </Description>
      </Argument>
      <Argument name="item">
        <Description>
          The WorkItem being processed.
        </Description>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="Object">
        <Description>
          The result of the workflow rule; dependent on the rule itself.
        </Description>
      </Argument>
    </Returns>
  </Signature>
  <Source><![CDATA[
	
		import sailpoint.object.Workflow;
		import sailpoint.object.Identity;
		import sailpoint.object.WorkflowLaunch;
		import sailpoint.api.Workflower;
		import sailpoint.object.TaskResult;
		import sailpoint.tools.Message;
		import org.apache.commons.logging.Log;
		import org.apache.commons.logging.LogFactory;
		import sailpoint.rapidapponboarding.logger.LogEnablement;
		Log opLogger = LogFactory.getLog("rapidapponboarding.rules");
   /** 
	* Launch Operations Workflow 
	* 
	*/
	public String launchWorkflow(String identityName, String comments, String workflowName, String frameworkFeature, String launcher, TaskResult taskResult)throws Exception
	{
	 		LogEnablement.isLogDebugEnabled(opLogger,".. Enter launchWorkflow");
	 		String status="";
		 	HashMap launchArgsMap = new HashMap();
		 	if (identityName == null || identityName.length() == 0) 
		 	{
        	taskResult.addMessage(new Message(Message.Type.Error, "ID NOT DEFINED", null));
        	throw new Exception("ID NOT DEFINED");
      		}
            if(taskResult!=null)
            {
	        taskResult.addMessage(new Message(Message.Type.Info, "ID = " + identityName, null)); 
	        taskResult.addMessage(new Message(Message.Type.Info, "Framework Feature = " + frameworkFeature, null)); 
	        taskResult.addMessage(new Message(Message.Type.Info, "Prepare Workflow = " + workflowName, null));
	        }
		 	//Prepare Launch Arguments
	      	launchArgsMap.put("workItemComments", comments ); 
	        launchArgsMap.put("identityName", identityName );
	        launchArgsMap.put("identityDisplayName", context.getObjectByName(Identity.class, identityName).getDisplayName());
	        launchArgsMap.put("requestType", frameworkFeature);
	        launchArgsMap.put("launcher",launcher);
	 		launchArgsMap.put("foregroundProvisioning","false");
	 		// Create WorkflowLaunch and set values
	        WorkflowLaunch wflaunch = new WorkflowLaunch();
	        Workflow wf = (Workflow) context.getObjectByName(Workflow.class, workflowName);
	       // wflaunch.setWorkflowName(wf.getName());
	        //wflaunch.setWorkflowRef(wf.getName());
	       // wflaunch.setCaseName(workflowName);
	       // wflaunch.setVariables(launchArgsMap);
			//Create Workflower and launch workflow from WorkflowLaunch
	        Workflower workflower = new Workflower(context);
	        WorkflowLaunch launch = workflower.launchSafely(wf,workflowName,launchArgsMap);
	        LogEnablement.isLogDebugEnabled(opLogger,".. launch "+launch);
	        if ( launch != null )
	        {
           	 	// print workflowcase ID (example only; might not want to do this in the task)
           	 	String workFlowId = launch.getWorkflowCase().getId();
				if (launch.getWorkflowCase() == null ) 
				{
				    LogEnablement.isLogDebugEnabled(opLogger,"..Workflow not launched ");
		        	taskResult.addMessage(new Message(Message.Type.Warn, "Workflow Not Launched", null));
		      	}
		      	else 
		      	{    
		      		LogEnablement.isLogDebugEnabled(opLogger,"..Workflow Launched ");
		        	taskResult.addMessage(new Message(Message.Type.Info, "Workflow Launched" , null));
		        }
			 status = launch.getStatus();
      	}
      	return status;
   }
 	
	]]></Source>
</Rule>