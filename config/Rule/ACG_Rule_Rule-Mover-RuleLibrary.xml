<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="Rule-Mover-RuleLibrary">
  <Source><![CDATA[
	
	import java.text.ParseException;
	import java.util.ArrayList;
	import java.util.Iterator;
	import java.util.List;
	import java.util.Map;
	import org.apache.commons.logging.Log;
	import org.apache.commons.logging.LogFactory;
	import sailpoint.api.IdentityService;
	import sailpoint.api.SailPointContext;
	import sailpoint.object.Application;
	import sailpoint.object.Attributes;
	import sailpoint.object.Custom;
	import sailpoint.object.Identity;
	import sailpoint.object.Link;
	import sailpoint.object.ObjectConfig;
	import sailpoint.object.ProvisioningPlan;
	import sailpoint.object.ProvisioningPlan.AccountRequest;
	import sailpoint.object.ProvisioningPlan.AttributeRequest;
	import sailpoint.object.Workflow;
	import sailpoint.tools.GeneralException;
	import sailpoint.tools.Util;
	import sailpoint.rapidapponboarding.rule.WrapperRuleLibrary;
	import sailpoint.rapidapponboarding.rule.MoverRuleLibrary;
	import sailpoint.rapidapponboarding.rule.AttributeSyncRuleLibrary;
	import sailpoint.rapidapponboarding.rule.JoinerRuleLibrary;
	import sailpoint.rapidapponboarding.rule.WorkflowUtil;
	import sailpoint.rapidapponboarding.rule.ROADUtil;
	import sailpoint.api.Provisioner;
	import sailpoint.object.ProvisioningProject;
	import sailpoint.rapidapponboarding.logger.LogEnablement;
	private Log moverLogger = LogFactory.getLog("rapidapponboarding.rules");
	/**
	 * Before Mover Process, Mover Certification is not launched
	 * In case there is an error before mover process
	 * @param context
	 * @param identityName
	 * @param workflow
	 * @param flow
	 * @param requestType
	 * @param launchSynchronousWorkflow
	 * @return
	 * @throws Exception
	 */
	 public boolean beforeMover(SailPointContext context, String identityName, Workflow workflow, String flow, String requestType, String launchSynchronousWorkflow) throws Exception 
	   {
	        LogEnablement.isLogDebugEnabled(moverLogger,"Enter beforeMover");
	        String extBeforeSetting=null;
			List results = new ArrayList();
			List listOfHashMap= new ArrayList();
			Identity identity = context.getObjectByName(Identity.class, identityName);
			IdentityService idService = new IdentityService(context);
	 		int countLinks=0;
	 		Boolean apBeforeMoverAttrSync= Boolean.FALSE;
	        countLinks=idService.countLinks(identity);
	        if (identity!=null && countLinks>0) 
			{
				List links = idService.getLinks(identity,0,0);
				for (Link link : links) 
				{
				   if (link!=null && link.getApplication() != null)
					 {
						Application app = link.getApplication();
						if(app!=null)
						{
						    apBeforeMoverAttrSync=(Boolean) app.getAttributeValue("apBeforeMoverAttrSync");
							Object beforeMoverAccountObj=app.getAttributeValue("beforemoverAccount");
							String nativeId=link.getNativeIdentity();
							String secondaryAccount=null;
							Boolean onlyPrimaryAccount=(Boolean) app.getAttributeValue("beforemoverPrimaryaccount");
							//If it is a Privileged Account / Secondary Account, make native id null, ONlY if Primary Account is Checked.
							if(onlyPrimaryAccount!=null && onlyPrimaryAccount.booleanValue() && link.getAttribute("psAccount") !=null && ((String)link.getAttribute("psAccount")).equalsIgnoreCase("TRUE"))
							{
								 nativeId=null;
								 secondaryAccount="TRUE";
							}
							else if(link.getAttribute("psAccount") !=null && ((String)link.getAttribute("psAccount")).equalsIgnoreCase("TRUE"))
							{
								secondaryAccount="TRUE";
							}
							extBeforeSetting = (String) beforeMoverAccountObj;
			        		if (extBeforeSetting == null) 
					        {
					            ObjectConfig config = Application.getObjectConfig();
					            if (config != null)
					            {
					                extBeforeSetting = (String) config.getObjectAttribute("beforemoverAccount").getDefaultValue();
					            }
			        		}
			        		if ( extBeforeSetting!=null && extBeforeSetting.equalsIgnoreCase("Extended Rule") && nativeId!=null)
				        	{
					        		String extendedRule=app.getAttributeValue("moverExtendedRule");
					        		HashMap appMap = new HashMap();
			        				appMap.put("appName", app.getName());
			        				appMap.put("extendedRule", extendedRule);
			        				if(apBeforeMoverAttrSync!=null && apBeforeMoverAttrSync.booleanValue())
			        				{
			        					appMap.put("apBeforeMoverAttrSync", apBeforeMoverAttrSync);
			        				}
			        				appMap.put("nativeId", nativeId);
			        				appMap.put("secondaryAccount", secondaryAccount);
			        				listOfHashMap.add(appMap);
					        }
					        else if ( extBeforeSetting!=null && extBeforeSetting.equalsIgnoreCase("Rename / Move LDAP Account") && nativeId!=null)
				        	{
					        		String extendedRule="Rule-FrameWork-Move-Account";
					        		HashMap appMap = new HashMap();
			        				appMap.put("appName", app.getName());
			        				appMap.put("extendedRule", extendedRule);
			        				appMap.put("nativeId", nativeId);
			        				appMap.put("runTargetAggregation", "TRUE");
			        				appMap.put("secondaryAccount", secondaryAccount);
			        				if(apBeforeMoverAttrSync!=null && apBeforeMoverAttrSync.booleanValue())
			        				{
			        					appMap.put("apBeforeMoverAttrSync", apBeforeMoverAttrSync);
			        				}
			        				listOfHashMap.add(appMap);
					        }
					        else if(apBeforeMoverAttrSync!=null && apBeforeMoverAttrSync.booleanValue() && nativeId!=null)
				        	{
					        		HashMap appMap = new HashMap();
			        				appMap.put("appName", app.getName());
			        				appMap.put("nativeId", nativeId);
			        				appMap.put("secondaryAccount", secondaryAccount);
			        				appMap.put("apBeforeMoverAttrSync", apBeforeMoverAttrSync);
			        				listOfHashMap.add(appMap);
					        }
					 	 }
		        	 }
				}
			 }
			 //Call Extended Rule - Start
		 	 for (HashMap map : listOfHashMap)
			 {
				if(map.get("extendedRule")!=null)
	       		{
		       		 ProvisioningPlan plan = new ProvisioningPlan();
		       		 LogEnablement.isLogDebugEnabled(moverLogger,"Enter beforeMover Invoke Extended Rule..."+map.get("extendedRule"));
		       		 List acctReqs = ROADUtil.invokeExtendedRuleNoObjectReferences(context,((String)map.get("secondaryAccount")),((String)map.get("extendedRule")), ((String)map.get("appName")), requestType, null, "", "", identityName, ((String)map.get("nativeId")),false,null);
		       		 boolean executePlan=false;
		             if(null != plan && null != acctReqs && !acctReqs.isEmpty()) 
		              {
					    	for(Iterator iterAcctReqs = acctReqs.iterator(); iterAcctReqs.hasNext();) 
					    	{
					        	plan.add((AccountRequest) iterAcctReqs.next());
					        	executePlan=true;
					       	}
					     LogEnablement.isLogDebugEnabled(moverLogger,"Enter beforeMover Launch Plan...");
					    results=MoverRuleLibrary.launchPlan( context,identityName,plan,launchSynchronousWorkflow,executePlan,map,null,"IdentityIQ Before Mover Extended Rule","false",null);
				      }
			  	}//Extended Rule Not Empty
		 	}
		   if(identity!=null)
	       {
	       	context.decache(identity);
	       }
	       //Call Extended Rule - End
	       //Call Attribute Sync Rule - Start
            for (HashMap map : listOfHashMap)
			{
				if(map.get("apBeforeMoverAttrSync")!=null && map.get("appName")!=null)
	       		{
			         ProvisioningPlan joinerPlan = AttributeSyncRuleLibrary.buildAttributeSynPlan(context, identityName, (String)map.get("appName"), workflow);
		       		 boolean executejoinerPlan=false;
		       		 List acctReqs=null;
		       		 if(null != joinerPlan) 
		             {
		              		acctReqs = joinerPlan.getAccountRequests();
		                    if(null != acctReqs && !acctReqs.isEmpty())
		                    {
						        executejoinerPlan=true;
						       	LogEnablement.isLogDebugEnabled(moverLogger,"Enter beforeMover Launch Attribute Synchronization Plan...");
						       	results=MoverRuleLibrary.launchPlan( context,identityName,joinerPlan,launchSynchronousWorkflow,executejoinerPlan,map,AttributeSyncRuleLibrary.ATTRIBUTESYNCFEATURE,"IdentityIQ Before Mover Attribute Sync","false",null);
					       	}
				      }
			      }
			 }
		    //Call Attribute Sync Rule - End
	        if(results!=null && results.size()>0 && results.contains("false"))
	        {
	        	LogEnablement.isLogDebugEnabled(moverLogger,"Exit beforeMover contains false"+results);
	       	 	LogEnablement.isLogDebugEnabled(moverLogger,"Exit beforeMover "+results);
	        	return false;
	        }
	        else
	        {
	         LogEnablement.isLogDebugEnabled(moverLogger,"Exit beforeMover "+results);
	         return true;
	       }
	       LogEnablement.isLogDebugEnabled(moverLogger,"Exit beforeMover "+results);
	    }
      /**
	     * Launch Mover Certification
	     * @param context
	     * @param identityName
	     * @param workflow
	     * @param requestType
	     * @param launcher
	     * @throws Exception
	     */
	    public void launchMover(SailPointContext context, String identityName, Workflow workflow, String requestType, String launcher) throws Exception 
	    {
	        LogEnablement.isLogDebugEnabled(moverLogger,"Enter launchMover");
	        Object extSetting=null;
	        Identity identity = context.getObjectByName(Identity.class, identityName);
			// Define manager object
	        Identity manager = identity.getManager();
			List applicationsToInclude = new ArrayList();
	        if (null == manager) {
	            manager = (Identity) context.getObjectByName(Identity.class, "No Manager Found");
	        }
			IdentityService idService = new IdentityService(context);
	 		int countLinks=0;
	        countLinks=idService.countLinks(identity);
	        if (identity!=null && countLinks>0) 
			{
				List links = idService.getLinks(identity,0,0);
				for (Link link : links) {
					if (link.getApplication() != null) {
						Application app = link.getApplication();
						if (app != null) {
			        		Object extObj = app.getAttributeValue("moverProcess");
			        		extSetting = (String) extObj;
			                if (extSetting == null) {
					            ObjectConfig config = Application.getObjectConfig();
					            if (config != null) {
					                extSetting = (String) config.getObjectAttribute("moverProcess").getDefaultValue();
					            }
			        		}
			        		if (extSetting!=null && extSetting.toString().equalsIgnoreCase("Manager Certification")) {
			        			if (applicationsToInclude == null) {
			        				applicationsToInclude = new ArrayList();
			        			}
			        			applicationsToInclude.add(app);
			        		}
	                		String appName = app.getName();
						}
					}
				}
			}        
	        if (applicationsToInclude != null && applicationsToInclude.size()>0) 
	        {
	        	if (identity != null && manager != null) 
		        {
		        	   	String identityNameCert=identity.getName();
		        	    String certifierName=manager.getName();
		        	   	ROADUtil.launchCertification(context, identityNameCert, launcher, certifierName, requestType, applicationsToInclude,"MOVER CERTIFICATION TEMPLATE",true);
	        	}
	        }
	        String personaEnabled=WrapperRuleLibrary.isPersonaEnabled(context);
	        if(personaEnabled!=null && personaEnabled.equalsIgnoreCase("TRUE"))
	        {
		        if (WrapperRuleLibrary.getRelationshipMessagePersona(context,identityName) != null) 
				{        
		        	WrapperRuleLibrary.deleteRelationshipMessagePersona(context,identityName);
		        }
	        }
	      	if (identity != null ) 
		   	{
		     context.decache(identity);
		    }
		    if (manager != null ) 
		    {
		       context.decache(manager);
		    }
		   LogEnablement.isLogDebugEnabled(moverLogger,"Exit launchMover");
	    }
	   /**
	    * Return Mover Request Type
	    * @param context
	    * @param workflow
	    * @return
	    */
	    public String getRequestTypeName(SailPointContext context, Workflow workflow) {
	        String requestType = "MOVER FEATURE";
	        return requestType;
	    }
	     /**
	    * Start Mover Process
	    * @param context
	    * @param workflow
	    * @param launcher
	    * @return
	    */
	    public void startMoverProcess(SailPointContext context, String identityName, Workflow workflow, String flow, String requestType, String launcher)throws Exception
	    {
	     	LogEnablement.isLogDebugEnabled(moverLogger,"Enter startMoverProcess");
		    if(beforeMover(context, identityName, workflow, flow,requestType, "true"))
	        {
	  			launchMover(context, identityName, workflow, requestType, launcher);
	  		}
	  		LogEnablement.isLogDebugEnabled(moverLogger,"Exit startMoverProcess");
  		}
  	/**
	 * Execute Post Mover Rule
	 * @param identityName
	 * @param requestType
	 */
    public void postMoverRule(String identityName, String requestType)
    {
    	LogEnablement.isLogDebugEnabled(moverLogger,"Start  postMoverRule" );
    	LogEnablement.isLogDebugEnabled(moverLogger,"..identityName..."+identityName );
    	LogEnablement.isLogDebugEnabled(moverLogger,"..requestType..."+requestType );
    	Map map = new HashMap();
	    //Common Configuration
        map = ROADUtil.getCustomGlobalMap(context);
        if(map!=null && map.containsKey("postMoverRule"))
		{
		    String ruleName=map.get("postMoverRule");
		    if(ruleName!=null && ruleName.length()>0)
		    {
		    ROADUtil.invokeExtendedRuleNoObjectReferences(context,null,ruleName, null,  requestType, null, null, null, identityName,null, false,null);
		    }
		 }
	 	LogEnablement.isLogDebugEnabled(moverLogger,"End  postMoverRule" );
    }
    /**
	 * After Mover Process, Joiner is launched
	 * @param context
	 * @param identityName
	 * @param workflow
	 * @param flow
	 * @param requestType
	 * @return
	 * @throws Exception
	 */
	 public void postJoiner(SailPointContext context, String identityName, Workflow workflow, String flow, String requestType) throws Exception 
	   {
	        LogEnablement.isLogDebugEnabled(moverLogger,"Enter postJoiner.."+identityName);
	        List listOfHashMap= new ArrayList();
			Identity identity = context.getObjectByName(Identity.class, identityName);
			IdentityService idService = new IdentityService(context);
	 		int countLinks=0;
	 		Boolean apAfterMoverJoiner= Boolean.FALSE;
	        countLinks=idService.countLinks(identity);
	        if (identity!=null && countLinks>0) 
			{
				List links = idService.getLinks(identity,0,0);
				for (Link link : links) 
				{
				   if (link!=null && link.getApplication() != null)
					 {
						Application app = link.getApplication();
						if(app!=null)
						{
						    apAfterMoverJoiner=(Boolean) app.getAttributeValue("apAfterMoverJoiner");
							String nativeId=link.getNativeIdentity();
							if(apAfterMoverJoiner!=null && apAfterMoverJoiner.booleanValue() && nativeId!=null)
				        	{
					        		HashMap appMap = new HashMap();
			        				appMap.put("appName", app.getName());
			        				appMap.put("nativeId", nativeId);
			        				appMap.put("apAfterMoverJoiner", apAfterMoverJoiner);
			        				listOfHashMap.add(appMap);
					        }
					 	 }
		        	 }
				}
			 context.decache(identity);
			 }
		    for (HashMap map : listOfHashMap)
			{
				if(map.get("apAfterMoverJoiner")!=null && map.get("appName")!=null)
	       		{
			         ProvisioningPlan joinerPlan = JoinerRuleLibrary.buildJoinerMoverPlan(context, identityName, workflow,(String)map.get("appName"));
		       		 boolean executejoinerPlan=false;
		       		 List acctReqs=null;
		       		 if(null != joinerPlan) 
		             {
		              		acctReqs = joinerPlan.getAccountRequests();
		                    if(null != acctReqs && !acctReqs.isEmpty())
		                    {
			              		executejoinerPlan=true;
						      	//Launch Plan
						      	LogEnablement.isLogDebugEnabled(moverLogger,"Launch Mover Joiner Process ");
						       	WorkflowUtil.launchRequestManagerWorkflow(context,identityName, joinerPlan, "false", null, 5, null, null, requestType, flow,"Post Mover Joiner");
					       	}
				      }
			      }
			   }
		   LogEnablement.isLogDebugEnabled(moverLogger,"Exit postJoiner "+identityName);
	    }
    	
	]]></Source>
</Rule>