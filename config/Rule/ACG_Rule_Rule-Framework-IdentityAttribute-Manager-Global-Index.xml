<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="Rule-Framework-IdentityAttribute-Manager-Global-Index" type="IdentityAttribute">
  <Signature returnType="String">
    <Inputs>
      <Argument name="log">
        <Description>
					The log object associated with the SailPointContext.
				</Description>
      </Argument>
      <Argument name="context">
        <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
				</Description>
      </Argument>
      <Argument name="environment" type="Map">
        <Description>
					Arguments passed to the aggregation or refresh task.
				</Description>
      </Argument>
      <Argument name="identity">
        <Description>
					The Identity object that represents the user
					that is being aggregated.
				</Description>
      </Argument>
      <Argument name="attributeDefinition">
        <Description>
					The AttributeDefinition object for this attribute.
				</Description>
      </Argument>
      <Argument name="link">
        <Description>
					The Link object from the Identity, if this is an application
           mapping rule.  For global mapping rules this will be void.
				</Description>
      </Argument>
      <Argument name="attributeSource">
        <Description>
					The AttributeSource object.
				</Description>
      </Argument>
      <Argument name="oldValue">
        <Description>
					The original value of the application account attribute.
				</Description>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="attributeValue">
        <Description>
					The value of the attribute that should be populated.
					The rule should return this value.
				</Description>
      </Argument>
    </Returns>
  </Signature>
  <Source><![CDATA[
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import sailpoint.api.IdentityService;
import sailpoint.api.SailPointContext;
import sailpoint.object.Application;
import sailpoint.object.Attributes;
import sailpoint.object.Identity;
import sailpoint.object.Link;
import sailpoint.object.ProvisioningPlan;
import sailpoint.tools.GeneralException;
import sailpoint.tools.Util;
import sailpoint.rapidapponboarding.rule.ObjectConfigAttributesRuleLibrary;
import sailpoint.rapidapponboarding.logger.LogEnablement;
Log logger = LogFactory.getLog("rapidapponboarding.rules");
LogEnablement.isLogDebugEnabled(logger,"Rule-IdentityAttribute-Relationships -  Enter");
//Initialize multi-valued attribute
List globalManagerIndexPersonConnections = new ArrayList();
String serviceAccountEnabled = ObjectConfigAttributesRuleLibrary.extendedAttrServiceAccountEnabled(context);
boolean servAccEnabled=false;
if(serviceAccountEnabled!=null && serviceAccountEnabled.length()>0 && serviceAccountEnabled.equalsIgnoreCase("TRUE"))
{
	servAccEnabled=true;
}
if(servAccEnabled)
{
	if (identity!=null && identity.getAttribute("serviceCube") != null) 
	{
		if (identity.getAttribute("serviceCube").equalsIgnoreCase("true")) 
		{
			return null;
		}
	}
}
if (identity!=null && !(identity.isCorrelated())) 
{
	return null;
}
IdentityService identityService = new IdentityService(context) ;
//This rule runs at non-employee application or global identifier application or MDM
//Employee Constants
String employeeSource = "";
String employeeStatusAttribute = "";
//THIS COULD BE BE COMMA SEPARATED VALUES
String employeeLOA = "";
//THIS COULD BE BE COMMA SEPARATED VALUES
String employeeLTD = "";
String employeeStatus="[ACTIVE]";
String empJobCodeAttr="";
String managerIdEmployee="";
//Student Constants
String educationSource = "";
String appointmentAttr = "";
String schoolNameAttr = "";
String campusCodeAttr = "";
String programNameAttr = "";
String eduStatus = "[ACTIVE]";
String managerIdStudent="";
//Non employee constants
String nonEmployeeSource = "";
String nonEmployeeStatus = "[ACTIVE]";
String nonEmployeeTypeAttr = "";
String managerIdNonEmployee="";
//EMPLOYEE
if(employeeSource!=null && employeeSource.length()>0)
{
    //Use Customization rule to set the IIQDisable status
    Application employeeApp=(Application)context.getObjectByName(Application.class, employeeSource);
	List employeeLinks = identityService.getLinks(identity, employeeApp);
	if (null != employeeLinks && Util.nullSafeSize(employeeLinks) > 0) 
	{
		for (Link searchedLink : employeeLinks) 
		{
				if(searchedLink!=null)
				{
					boolean disabled = ("true".equals(searchedLink.getAttribute("IIQDisabled")) || searchedLink.getAttribute("IIQDisabled") == true);  
		            if (disabled) 
		            {
		            	employeeStatus = "[INACTIVE]";
		            } 
		            else
		            {
		            	employeeStatus = "[ACTIVE]";
		            }
	            String empJobCode = null;
				if(empJobCodeAttr!=null && empJobCodeAttr.length()>0)
				{
					if (searchedLink.getAttribute(empJobCodeAttr) != null) 
					{
		                empJobCode = searchedLink.getAttribute(empJobCodeAttr);
		                if(empJobCode!=null && empJobCode.length()>0)
		                {
		                	empJobCode=empJobCode.trim();
		                }
		            }
	            }  	
		   		List employeeLOAList = null;
				List employeeLTDList = null;
				if (employeeLOA != null) 
				{
					employeeLOAList = Util.csvToList(employeeLOA);
				}
				if (employeeLTD != null) 
				{
					employeeLTDList = Util.csvToList(employeeLTD);
				}
				List listFinal = new ArrayList();
				if (employeeLOAList != null) 
				{
					listFinal.addAll(employeeLOAList);
				}
				if (employeeLTDList != null) 
				{
					listFinal.addAll(employeeLTDList);
				}
				//Check if Employee is on LOA/LTD
				for (String singleStatus : listFinal) 
				{
					if (searchedLink.getAttribute(employeeStatusAttribute) != null) 
					{
						if (((String)searchedLink.getAttribute(employeeStatusAttribute)).equalsIgnoreCase(singleStatus)) 
						{
							employeeStatus = "[SUSPENDED]";
						}
					}
				}
				String managerEmpName="No Manager";
				if(managerIdEmployee!=null && managerIdEmployee.length()>0 && searchedLink!=null && searchedLink.getAttribute(managerIdEmployee)!=null &&  searchedLink.getAttribute(managerIdEmployee).length()>0)
				{
					managerEmpName= searchedLink.getAttribute(managerIdEmployee);
					if(managerEmpName!=null && managerEmpName.length()>0)
					{
					 	managerEmpName=managerEmpName.trim();
					}
					else
					{
						managerEmpName="No Manager";
					}
				}
				if(empJobCode!=null && empJobCode.length()>0)
		        {
		        globalManagerIndexPersonConnections.add("EMPLOYEE " + employeeStatus +" ("+empJobCode+")"+" MANAGER "+managerEmpName);
		        }
		        else
		        {
				globalManagerIndexPersonConnections.add("EMPLOYEE " + employeeStatus +" MANAGER "+managerEmpName);
				}
			}
	      }
	}
	if(employeeApp!=null)
	{
	context.decache(employeeApp);
	}
}
//STUDENT
if(educationSource!=null && educationSource.length()>0)
{
	//Multiple programs students
	//Use Customization rule to set the IIQDisable status
	 Application educationApp=(Application)context.getObjectByName(Application.class, educationSource);
	List eduLinks = identityService.getLinks(identity, educationApp);
	if (null != eduLinks && Util.nullSafeSize(eduLinks) > 0) {
		for (Link edulink : eduLinks) {
	    	if (edulink != null) 
	    	{
	    	    String appointment = null;
	            String campusCode = null;
	            String programName = null;
				String schoolName = null;
				if(schoolNameAttr!=null)
				{
					if (edulink.getAttribute(schoolNameAttr) != null) 
					{
		                schoolName = edulink.getAttribute(schoolNameAttr);
		                if(schoolName!=null)
		                {
		                schoolName=schoolName.trim();
		                }
		            }
	            }
	            if(campusCodeAttr!=null)
				{
					if (edulink.getAttribute(campusCodeAttr) != null) 
					{
		                campusCode = edulink.getAttribute(campusCodeAttr);
		                if(campusCode!=null)
		                {
		                campusCode=campusCode.trim();
		                }
		            }
	            }
	            if(programNameAttr!=null)
				{
					if (edulink.getAttribute(programNameAttr) != null) 
					{
		                programName = edulink.getAttribute(programNameAttr);
		            }
		            if(programName!=null)
	                {
	                programName=programName.trim();
	                }
	            }
	             if(appointmentAttr!=null)
				{
					if (edulink.getAttribute(appointmentAttr) != null) 
					{
		                appointment = edulink.getAttribute(appointmentAttr);
		            }
		            if(appointment!=null)
	                {
	                appointment=appointment.trim();
	                }
	            }
	            boolean disabled = ("true".equals(edulink.getAttribute("IIQDisabled")) || edulink.getAttribute("IIQDisabled") == true);  
	            if (disabled) 
	            {
	            	eduStatus = "[INACTIVE]";
	            }  
	            else
	            {
	            	eduStatus = "[ACTIVE]";
	            }
	            String managerStudentName="No Manager";
				if(managerIdStudent!=null && managerIdStudent.length()>0 && edulink!=null && edulink.getAttribute(managerIdStudent)!=null &&  edulink.getAttribute(managerIdStudent).length()>0)
				{
					managerStudentName= edulink.getAttribute(managerIdStudent);
					if(managerStudentName!=null && managerStudentName.length()>0)
					{
					 	managerStudentName=managerStudentName.trim();
					}
					else
					{
						managerStudentName="No Manager";
					}
				}  		
	            if(campusCode!=null && campusCode.length()>0 && appointment!=null && appointment.length()>0 && programName!=null 
	             && programName.length()>0 && schoolName!=null  && schoolName.length()>0)
	            {
				globalManagerIndexPersonConnections.add("STUDENT " + eduStatus + " (" + campusCode + "-" + appointment + "-" + programName + "-" + schoolName + ")" +" MANAGER "+managerStudentName);
				}
				if((campusCode==null||campusCode.length()<0) && appointment!=null && appointment.length()>0 && programName!=null 
	             && programName.length()>0 && schoolName!=null  && schoolName.length()>0)
	            {
				globalManagerIndexPersonConnections.add("STUDENT " + eduStatus + " (" + appointment + "-" + programName + "-" + schoolName + ")"+" MANAGER "+managerStudentName);
				}
				if((appointment==null||appointment.length()<0) && campusCode!=null && campusCode.length()>0 && programName!=null 
	             && programName.length()>0 && schoolName!=null  && schoolName.length()>0)
	            {
				globalManagerIndexPersonConnections.add("STUDENT " + eduStatus + " (" + campusCode + "-" + programName + "-" + schoolName + ")"+" MANAGER "+managerStudentName);
				}
	        }
	    }
	}
	if(educationApp!=null)
	{
	context.decache(educationApp);
	}
}
//NON-EMPLOYEE
if(nonEmployeeSource!=null && nonEmployeeSource.length()>0)
{
	//Multiple Non-Employee Relationships
	//Use Customization rule to set the IIQDisable status
	 Application nonEmployeeApp=(Application)context.getObjectByName(Application.class, nonEmployeeSource);
	List nonEmpLinks = identityService.getLinks(identity, nonEmployeeApp);
	if (null != nonEmpLinks && Util.nullSafeSize(nonEmpLinks) > 0) {
		for (Link nonEmpLink : nonEmpLinks) 
		{
	    	if (nonEmpLink != null) 
	    	{
	    	   if(nonEmpLink!=null)
				{
					boolean disabled = ("true".equals(nonEmpLink.getAttribute("IIQDisabled")) || nonEmpLink.getAttribute("IIQDisabled") == true);  
		            if (disabled) 
		            {
		            	nonEmployeeStatus = "[INACTIVE]";
		            } 
		            else
		            {
		            	nonEmployeeStatus = "[ACTIVE]";
		            }
	            }  
		      	String managerNonEmpName="No Manager";
				if(managerIdNonEmployee!=null && managerIdNonEmployee.length()>0 && nonEmpLink!=null && nonEmpLink.getAttribute(managerIdNonEmployee)!=null &&  nonEmpLink.getAttribute(managerIdNonEmployee).length()>0)
				{
					managerNonEmpName= nonEmpLink.getAttribute(managerIdNonEmployee);
					if(managerNonEmpName!=null && managerNonEmpName.length()>0)
					{
					 	managerNonEmpName=managerNonEmpName.trim();
					}
					else
					{
						managerNonEmpName="No Manager";
					}
				}
			   if(nonEmployeeTypeAttr!=null && nonEmployeeTypeAttr.length()>0)
		       { 
		          	String nonEmployeeTpe=null;
		          	if (nonEmpLink.getAttribute(nonEmployeeTypeAttr) != null) 
					{
		                nonEmployeeTpe = nonEmpLink.getAttribute(nonEmployeeTypeAttr);
		                if(nonEmployeeTpe!=null && nonEmployeeTpe.length()>0)
		                {
		               		nonEmployeeTpe=nonEmployeeTpe.trim();
		                }
		            }
		            if(nonEmployeeTpe!=null && nonEmployeeTpe.length()>0)
		            {
		      	 		globalManagerIndexPersonConnections.add("NON-EMPLOYEE " + nonEmployeeStatus + " ("+ nonEmployeeTpe + ")"+" MANAGER "+managerNonEmpName);
		      	 	}
		      	 	else
		      	 	{
		      	 		globalManagerIndexPersonConnections.add("NON-EMPLOYEE " + nonEmployeeStatus+" MANAGER "+managerNonEmpName);
		      	 	}
		       }
		       else
	      	   {
	      	 		globalManagerIndexPersonConnections.add("NON-EMPLOYEE " + nonEmployeeStatus+" MANAGER "+managerNonEmpName);
	      	   }
	        }
	    }
	}
	if(nonEmployeeApp!=null)
	{
	context.decache(nonEmployeeApp);
	}
}
if (globalManagerIndexPersonConnections != null) 
{
	if (globalManagerIndexPersonConnections.size() == 0) 
	{
		globalManagerIndexPersonConnections.add("");
	}
}
return globalManagerIndexPersonConnections;
	]]></Source>
</Rule>