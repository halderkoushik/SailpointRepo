<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="Rule-ChangePasswordRulesLibrary">
  <Source><![CDATA[
    
    import java.util.ArrayList;
    import java.util.List;
    import java.util.Map;
	import sailpoint.object.Resolver;
    import sailpoint.api.EncodingUtil;
    import sailpoint.api.passwordConstraints.PasswordConstraintHistory;
    import sailpoint.api.PasswordGenerator;
    import sailpoint.api.PasswordPolice;
    import sailpoint.api.PasswordPolicyException;
    import sailpoint.object.Application;
    import sailpoint.object.Identity;
    import sailpoint.object.Workflow;
    import sailpoint.object.Link;
    import sailpoint.object.PasswordPolicy;
    import sailpoint.object.Attributes;
    import sailpoint.object.Custom;
    import sailpoint.object.ObjectConfig;
    import sailpoint.object.ObjectAttribute;
    import sailpoint.object.ProvisioningPlan;
    import sailpoint.object.ProvisioningPlan.AccountRequest;
    import sailpoint.object.ProvisioningPlan.AttributeRequest;
    import sailpoint.tools.GeneralException;
    import sailpoint.tools.Message;
    import sailpoint.tools.Util;
    import sailpoint.web.messages.MessageKeys;
    import sailpoint.api.IdentityService;
    import sailpoint.object.Form;
	import sailpoint.object.Form.Type;
	import sailpoint.object.Form.Section;
	import sailpoint.object.Form.Button;
	import sailpoint.object.Field;
	import sailpoint.api.ObjectUtil;
    import org.apache.commons.logging.Log;
	import org.apache.commons.logging.LogFactory;
    import org.apache.log4j.Level;
    import sailpoint.rapidapponboarding.logger.LogEnablement;
    Log pwlogger = LogFactory.getLog("rapidapponboarding.rules");
	/**
	 * Assimilate Password Policy for an Identity
	 * @param ident 
	 * @return
	 */
	public PasswordPolicy generateUnifiedPasswordPolicy(Identity ident) 
	{
		LogEnablement.isLogDebugEnabled(pwlogger,"Enter generateUnifiedPasswordPolicy");
		PasswordPolicy unifiedPasswordPolicy = new PasswordPolicy();
		unifiedPasswordPolicy.assimilatePolicies(getPasswordPolicies(getPasswordManagedLinks(ident)));
		LogEnablement.isLogDebugEnabled(pwlogger,"Enter generateUnifiedPasswordPolicy");
		return unifiedPasswordPolicy;
	}
    /**
     * Get Password Policy for Each Link
     * @param links
     * @return
     */
	public List getPasswordPolicies(List links) 
	{
		LogEnablement.isLogDebugEnabled(pwlogger,"Enter getPasswordPolicies");
		List policies = new ArrayList();
		if (links == null || Util.isEmpty(links)) 
		{
			LogEnablement.isLogErrorEnabled(pwlogger,"No Link objects provided!");
		} else {
			PasswordPolice police = new PasswordPolice(context);
			for (Link link : links) 
			{
				if (link!=null && link.getApplicationName()!=null) 
				{
					Application app = link.getApplication();
					//In case there are target applications, this means we have a source application
					if(app!=null && (String) app.getAttributeValue("targetpasswordSync")!=null)
					{
						String targetApps = app.getAttributeValue("targetpasswordSync");
						if(targetApps!=null)
						{
							PasswordPolicy policy = police.getEffectivePolicy(link);
							if(null != policy) 
							{
								policies.add(policy);
							}
						}
					}
				}
			}
		}
		LogEnablement.isLogDebugEnabled(pwlogger,"End getPasswordPolicies");
		return policies;
	}
   /**
    * Get All Target Links for Password Synchronization
    * @param ident
    * @return
    */
	public List getPasswordManagedLinks(Identity ident) 
	{
		LogEnablement.isLogDebugEnabled(pwlogger,"Enter getPasswordManagedLinks");
		List applicationsForIdentity = new ArrayList();
		List validLinks = new ArrayList();
		if (ident == null) 
		{
			LogEnablement.isLogErrorEnabled(pwlogger,"Identity not found!");
		} 
		List links;
		IdentityService idService = new IdentityService(context);
		if (ident!=null)
		{
			links = idService.getLinks(ident,0,0);
			for (Link link : links) 
			{
				if (link!=null && link.getApplicationName()!=null) 
				{
					Application app = link.getApplication();
					if(app!=null)
					{
						Boolean entDir=(Boolean) app.getAttributeValue("entDir");
						//In case there are target applications or application is a enterprise directory, this means we have a source application
						if((String) app.getAttributeValue("targetpasswordSync")!=null || (entDir!=null && entDir.booleanValue()))
						{
							String targetApps = app.getAttributeValue("targetpasswordSync");
							LogEnablement.isLogErrorEnabled(pwlogger,"targetApps..."+targetApps);
							LogEnablement.isLogErrorEnabled(pwlogger,"entDir..."+entDir);
							//Let's check if we this application has additional accounts
							Boolean primarySyncaccounts=(Boolean) app.getAttributeValue("primarypasswordSyncaccounts");
							LogEnablement.isLogErrorEnabled(pwlogger,"primarySyncaccounts..."+primarySyncaccounts);
							if(primarySyncaccounts)
							{
								//Let's ignore secondary account
								if(link.getAttribute("psAccount")==null || ((String)link.getAttribute("psAccount")).equalsIgnoreCase("FALSE"))
								{
									validLinks.add(link);
								}
							}
							else
							{
								//Let's add All Links
								validLinks.add(link);
							}
						}
					}
				}
			}
		}
		return validLinks;
	}
   /**
   * Generate Random Password
   * @param policy
   * @return
   */
	public String generatePassword(PasswordPolicy policy) 
	{
		LogEnablement.isLogDebugEnabled(pwlogger,"Enter generatePassword");
		String password = null;
		try {
			PasswordGenerator gen = new PasswordGenerator(context);
			password = gen.generatePassword(policy);
		} catch (GeneralException ge) {
			LogEnablement.isLogErrorEnabled(pwlogger,"Exception generating password: " + ge.getMessage());
		}
		LogEnablement.isLogDebugEnabled(pwlogger,"End generatePassword");
		return password;
	}
	/**
	 * Build Plan for Password Synchronization from Target to Source
	 * @param identityName
	 * @param password
	 * @param isSelfService
	 * @param workflow
	 * @return
	 */
	public ProvisioningPlan buildPasswordPlan(String identityName, String password, boolean isSelfService, Workflow workflow) 
	{
		LogEnablement.isLogDebugEnabled(pwlogger,"Enter buildPasswordPlan");
		ProvisioningPlan plan = new ProvisioningPlan();
		if (Util.isNullOrEmpty(identityName) || Util.isNullOrEmpty(password)) 
		{
			LogEnablement.isLogErrorEnabled(pwlogger,"Identity name and/or password not provided!");
			workflow.put("confirmationMessage","Identity name and/or password not provided");
		} 
		else 
		{
			Identity ident = context.getObjectByName(Identity.class, identityName);
			if (ident == null) 
			{
				LogEnablement.isLogErrorEnabled(pwlogger,"Could not retrieve Identity "+identityName);
				workflow.put("confirmationMessage","Could not retrieve Identity "+identityName);
			} 
			else 
			{
				plan.setIdentity(ident);
				List links = getPasswordManagedLinks(ident);
				if (links == null || Util.isEmpty(links))
				{
					LogEnablement.isLogErrorEnabled(pwlogger,"No Link objects found!");
					workflow.put("confirmationMessage","No Password Synchronization Application on the Identity");
				} 
				else 
				{
					for (Link link : links) 
					{
						AccountRequest acctReq = new AccountRequest(AccountRequest.Operation.Modify, link.getApplicationName(), link.getInstance(), link.getNativeIdentity());
						AttributeRequest attrReq = new AttributeRequest(ProvisioningPlan.ATT_PASSWORD, ProvisioningPlan.Operation.Set, password);
						//Attributes secretAttr = new Attributes();
	           			//secretAttr.put("secret", "true");
	           			//attrReq.setArguments(secretAttr);
						acctReq.add(attrReq);
						/**
						 * For administrative password changes, set the "preExpire" flag in each
						 * attribute request so that the user will have to change their password
						 * after initial login.
						 */
						if (!isSelfService) {
							attrReq.put(ProvisioningPlan.ATT_PRE_EXPIRE, true);
						}
						plan.add(acctReq);
					}
				}
			}
		}
		LogEnablement.isLogDebugEnabled(pwlogger,"End buildPasswordPlan");
		return plan;
	}
  /**
   * Update Password History TO STOP Password Interceptor Loop
   * @param identityName
   * @param password
   * @param policy
   */
	public void updatePasswordHistory(String identityName, String password, PasswordPolicy policy) 
	{
		LogEnablement.isLogDebugEnabled(pwlogger,"Enter updatePasswordHistory");
		if (Util.isNullOrEmpty(password)) {
			LogEnablement.isLogErrorEnabled(pwlogger,"No password provided!");
		} else if (Util.isNullOrEmpty(identityName)) {
			LogEnablement.isLogErrorEnabled(pwlogger,"Identity name has not been provided!");
		} else {
			Identity ident=ObjectUtil.lockIdentity(context, identityName);
			try
			{
			if (ident == null) 
			{
				LogEnablement.isLogErrorEnabled(pwlogger,"Could not retrieve Identity "+identityName);
			} 
			else 
			{
				if (policy == null) {
					pwlogger.warn("No PasswordPolicy object provided!");
					// no password policies used?? set current password for interceptor loop checks
					ident.setPasswordHistory(EncodingUtil.encode(password, context));
				} else {
					int max = -1;
					Map constraints = policy.getPasswordConstraints();
					if (constraints.containsKey(PasswordConstraintHistory.HISTORY) && constraints.get(PasswordConstraintHistory.HISTORY) != null) {
						max = Integer.parseInt((String)policy.getPasswordConstraints().get(PasswordConstraintHistory.HISTORY));
					}
					if (max <= 0) {
						// not supposed to have any password history but set current password for interceptor loop checks
						ident.setPasswordHistory(EncodingUtil.encode(password, context));
					} else {
						String src = ident.getPasswordHistory();
						List history = Util.csvToList(src);
						if (history == null) {
							history = new ArrayList();
						}
						// reverse order
						history.add(0, EncodingUtil.encode(password, context));
						// prune 
						for (int i = history.size() - 1 ; i >= max ; i--) {
							history.remove(i);
						}
						src = Util.listToCsv(history);
						ident.setPasswordHistory(src);
					}
				}
				LogEnablement.isLogDebugEnabled(pwlogger,"End updatePasswordHistory");
			}
			}
			finally 
            {
              try 
              {
              	LogEnablement.isLogErrorEnabled(pwlogger,"UnLock  Identity");
                  // Save, Commit, Unlock
                  if(ident!=null)
                  ObjectUtil.unlockIdentity(context, ident);
              }
              catch (Throwable t) {
                	LogEnablement.isLogErrorEnabled(pwlogger,"Unable to unlock identity ");
              }
           }
		}
	}
  /**
   * Validate Password From Password History
   * @param identityName
   * @param password
   * @param policy
   * @return
   */
	public Message validatePassword(String identityName, String password, PasswordPolicy policy) {
		Message error = null;
		LogEnablement.isLogDebugEnabled(pwlogger,"Enter validatePassword");
		try{
			Identity ident = context.getObject(Identity.class, identityName);
			PasswordPolice police = new PasswordPolice(context);
			police.checkPassword(ident, policy, password, ident.getPasswordHistory());
		} catch(PasswordPolicyException ppe) {
			String messageKey = "";
			for (Message msg : ppe.getAllMessages()) {
				messageKey += msg.getMessage() + ", ";
			}
			// Remove final comma and space from message
			messageKey = messageKey.substring(0, messageKey.length() - 2);
			error = new Message(Message.Type.Error, messageKey, null);
		}
		LogEnablement.isLogDebugEnabled(pwlogger,"End validatePassword");
		return error;
	}
  /**
   * Validate Password Confirmation
   * @param password
   * @param confirmPassword
   * @return
   */
	public Message validateConfirmPassword(String password, String confirmPassword) {
		Message error = null;
		LogEnablement.isLogDebugEnabled(pwlogger,"Enter validateConfirmPassword");
		if (!Util.nullSafeEq(password, confirmPassword)) {
			error = new Message(Message.Type.Error, MessageKeys.ERROR_IDENTITY_CONFIRM_PASS_MISMATCH, null);
		}
		LogEnablement.isLogDebugEnabled(pwlogger,"End validateConfirmPassword");
		return error;
	}
/**
 * Build HelpDesk Cube Verification Attributes List
 * @param cubeAttrsDisplayMap
 * @param cubeAttrsList
 * @param hideCubeAttrs
 * @return
 * @throws Exception
 */
	public List buildCubeAttrsListAndDisplayMap(HashMap cubeAttrsDisplayMap,List cubeAttrsList,Attributes hideCubeAttrs) throws Exception 
	{
		LogEnablement.isLogDebugEnabled(pwlogger,"Enter buildCubeAttrsListAndDisplayMap ");
		ObjectConfig objectConfig=Identity.getObjectConfig();
		if(objectConfig!=null)
		{
			List objAttrList=objectConfig.getObjectAttributes();
			for( ObjectAttribute objAttr:objAttrList)
			{
				if(objAttr!=null && objAttr.getName()!=null && !objAttr.isMulti() && !objAttr.isSilent() && !objAttr.isSystem() )
				{
					if(hideCubeAttrs!=null && !hideCubeAttrs.containsKey(objAttr.getName()))
					{
						cubeAttrsDisplayMap.put(objAttr.getName(),objAttr.getDisplayName());
						cubeAttrsList.add(objAttr.getName());
					}
				}
			}
		}
		return cubeAttrsList;
	}
/**
 * Build HelpDesk Verification Form
 * @param identityModel
 * @return
 * @throws Exception
 */
	public Form buildVerificationForm (HashMap identityModel) throws Exception 
	{
		//Get HIDDEN CUBE Attributes from Custom Artifact
		Attributes hideCubeAttrs = new Attributes();
		Custom mappingObj = context.getObjectByName(Custom.class, "Custom-Identity-Verification-Form-Settings");
		if(mappingObj!=null && mappingObj.getAttributes()!=null)
		{
			hideCubeAttrs = mappingObj.getAttributes();	
			context.decache(mappingObj);
		}
		//GET EXISTING FORM
		Form existingform=null;
		Form deepCpyForm=null;
		existingform=context.getObjectByName(Form.class,"Verify Identity");
		if(existingform!=null)
		{
			deepCpyForm=existingform.deepCopy((Resolver)context);
			if(deepCpyForm!=null)
			{
				Section existingSection=null;
				existingSection=deepCpyForm.getSection("identityInfo");
				HashMap cubeAttrsDisplayMap = new HashMap();
				List cubeAttrsList= new ArrayList();
				buildCubeAttrsListAndDisplayMap(cubeAttrsDisplayMap,cubeAttrsList,hideCubeAttrs);
				if(existingSection!=null)
				{
					for (String cubeAttr:cubeAttrsList)
					{
						Field fieldCubeAttr = new Field();
						if(cubeAttrsDisplayMap!=null && cubeAttrsDisplayMap.containsKey(cubeAttr))
						{
							String displayName=cubeAttrsDisplayMap.get(cubeAttr);
							fieldCubeAttr.setDisplayName(displayName);
						}
						fieldCubeAttr.setName(cubeAttr);
						fieldCubeAttr.setType("string");
						fieldCubeAttr.setReadOnly(false);
						existingSection.add(fieldCubeAttr);
					}
					existingSection.setColumns(4);
				}
			}
		}
		LogEnablement.isLogDebugEnabled(pwlogger,"End buildVerificationForm...");
		return deepCpyForm;
	}
    
  ]]></Source>
</Rule>