<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="Rule-Framework-PSA-PasswordExpiration">
  <Signature returnType="String">
    <Inputs>
      <Argument name="log">
        <Description>
          The log object associated with the SailPointContext.
        </Description>
      </Argument>
      <Argument name="context">
        <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
      </Argument>
      <Argument name="link">
        <Description>
          The Link being inspected.
        </Description>
      </Argument>
    </Inputs>
  </Signature>
  <Source><![CDATA[
    
		    import java.util.Calendar;
		    import java.util.Date;
		    import sailpoint.tools.Util;
		    import org.apache.commons.logging.Log;
			import org.apache.commons.logging.LogFactory;
		    import sailpoint.object.Attributes;
			import sailpoint.object.Filter;
			import sailpoint.object.QueryOptions;
			import sailpoint.object.Link;
			import sailpoint.object.Application;	
			import sailpoint.object.Workflow;
		   	import sailpoint.object.WorkflowLaunch;
	   		import sailpoint.object.Identity;
	   		import sailpoint.object.Rule;
		   	import sailpoint.object.ProvisioningPlan;
		   	import sailpoint.object.ProvisioningPlan.AccountRequest;;
		   	import sailpoint.object.ProvisioningPlan.AttributeRequest;
		   	import sailpoint.api.PasswordGenerator;
		   	import sailpoint.tools.GeneralException;
			import sailpoint.api.Workflower;
			import java.text.SimpleDateFormat;
			import sailpoint.rapidapponboarding.rule.ROADUtil;
			import sailpoint.rapidapponboarding.logger.LogEnablement;
		   	Log expLogger = LogFactory.getLog("rapidapponboarding.rules");
		   	 /** Converts the 18-digit Active Directory timestamps, also named 'Windows NT time format' or 
			 * 'Win32 FILETIME or SYSTEMTIME'. These are used in Microsoft Active Directory for pwdLastSet,accountExpires, LastLogon, LastLogonTimestamp
			 *  The timestamp is the number of 100-nanoseconds intervals (1 nanosecond = one billionth of a second) since Jan 1, 1601 UTC
			 * 
			 */
			public Date convertMSNanoToDate(String nanoSeconds)
			{
	        long offset=11644473600000L;
	        long javaTime = Long.parseLong( nanoSeconds ) / 10000L - offset;
	       	return new Date( javaTime );
	        }
	        /*utc is in the form of "20010706080000Z"*/
		   public Date utcDate(String utc) throws Exception
		   {
			    SimpleDateFormat formatter = new SimpleDateFormat("yyyyMMddHHmmss'Z'");
			    // parse utc into Date
			     Date date = formatter.parse(utc);
			     return date;
			}
         	 /* Get All Applications */
		    public List getAllPrivilegedLinksPerApp (String appName)
		    {
		   	 	LogEnablement.isLogDebugEnabled(expLogger,"Enter getAllPrivilegedLinksPerApp");
		   	 	List linkIds= new ArrayList();
		   	 	Filter privilegedAccountFilter=Filter.ignoreCase(Filter.eq("psAccount", "TRUE"));
				Filter baseFilter = Filter.and(Filter.eq("application.name", appName),privilegedAccountFilter);
				QueryOptions qo = new QueryOptions();  
				qo.addFilter(baseFilter);
				// Use a projection query first to return minimal data.  
				ArrayList returnCols = new ArrayList();  
				returnCols.add("id");  
				// Execute the query against the IdentityIQ database.  
				Iterator it = context.search(Link.class, qo, returnCols); 
				if(it!=null)
				{ 
					while (it.hasNext()) 
					{  
						Object[] retObjs = (Object[]) it.next();  
						if(retObjs!=null && retObjs.length==1)
						{
							if(retObjs[0]!=null)
							{
							linkIds.add((String) retObjs[0]); 
							} 
						}
					}  
					Util.flushIterator(it); 
				} 
				LogEnablement.isLogDebugEnabled(expLogger,"End getAllPrivilegedLinksPerApp "+linkIds);
		  	    return linkIds;  
		    }
			// Get all applications that have password expiration enbaled    
		    public List getPasswordEnabledApplications ()
		    {
		    	List applicationNames= new ArrayList();
		    	LogEnablement.isLogDebugEnabled(expLogger,"Enter getPasswordEnabledApplications");
		    	Filter filter = Filter.ignoreCase(Filter.eq("enablepswexpNotification", "TRUE"));
		    	QueryOptions qo = new QueryOptions();  
				qo.addFilter(filter);
				// Use a projection query first to return minimal data.  
				ArrayList returnCols = new ArrayList();  
				returnCols.add("name");  
				// Execute the query against the IdentityIQ database.  
				Iterator it = context.search(Application.class, qo, returnCols);  
				while (it.hasNext()) 
				{  
				    String applicatioName=null;
					Object[] retObjs = (Object[]) it.next();
					if(retObjs.length==1)
					{
					applicatioName = (String) retObjs[0];  
					}  
					if(applicatioName!=null)
					{
					applicationNames.add(applicatioName);
					}
				}  
				Util.flushIterator(it); 
				LogEnablement.isLogDebugEnabled(expLogger,"Exit getPasswordEnabledApplications "+applicationNames); 
		  	    return applicationNames;  
		    }
			//Generate Password Value
			public String generatePasswordValue(Application app, String identityName)
			{
			 	LogEnablement.isLogDebugEnabled(expLogger,"...Start generatePasswordValue "); 
			 	Identity identity=context.getObjectByName(Identity.class, identityName);
			    //Get Password Attribute and Password Value
			    String passwordValue=null;
		       	if(app!=null )
		       	{
			       	PasswordGenerator pg = new PasswordGenerator(context);
			       try
			        {
				        passwordValue=pg.generatePassword(identity, app);
			        }
			        catch (GeneralException ex)
			        {
			            passwordValue=pg.generatePassword();
			        }
		       	}
		       	if(identity!=null)
		       	{
		       	context.decache(identity);
		       	}
		       	return passwordValue;
			}
    		LogEnablement.isLogDebugEnabled(expLogger,"Enter Rule-Framework-PSA-PasswordExpiration");
            //1) Get All Password Enabled Applications
		    List passwordEnabledApplications= getPasswordEnabledApplications();
			//2) For each app, construct a query filter to obtain all privileged links
			if(passwordEnabledApplications!=null && passwordEnabledApplications.size()>0)
			{
			     Application app;
				for (String appName : passwordEnabledApplications) 
				{
	            	//3) Iterate all links and find if their password has expired
	              	List linkList = getAllPrivilegedLinksPerApp(appName);
	              	if (linkList != null && !linkList.isEmpty()) 
	              	{
	              	    app  = context.getObjectByName(Application.class, appName);
						for(String linkId : linkList) 
	              		{
	              		        Link link   = context.getObjectById(Link.class, linkId);
	              			    int daysBeforeExp = 0;
							    int daysAfterExp = 0;
							    int xDaysOld = 0;
							    String daysTillExpiration = null;
							    String pwdAttrValueFromLink=null;
							    String xDaysOldPassword = app.getAttributeValue("xdaysresetPwd");
							    LogEnablement.isLogDebugEnabled(expLogger,"xDaysOldPassword " + xDaysOldPassword);
							    String daysBeforeExpstr = app.getAttributeValue("beforepwdexpAttr");
							    LogEnablement.isLogDebugEnabled(expLogger,"daysBeforeExpstr " + daysBeforeExpstr);
							    String daysAfterExpstr = app.getAttributeValue("afterpwdexpAttr");
							    LogEnablement.isLogDebugEnabled(expLogger,"daysAfterExpstr " + daysAfterExpstr);
							    String pwdAttr = app.getAttributeValue("pwdexpAttr");
							    LogEnablement.isLogDebugEnabled(expLogger,"pwdAttr " + pwdAttr);
							    String pwdAttrExpression = app.getAttributeValue("pwdexpAttrexpression");
							    LogEnablement.isLogDebugEnabled(expLogger,"pwdAttrExpression " + pwdAttrExpression);
							    String pwdexpAttrexpressionrule = app.getAttributeValue("pwdexpAttrexpressionrule");
							    LogEnablement.isLogDebugEnabled(expLogger,"pwdexpAttrexpressionrule " + pwdexpAttrexpressionrule);
							    String afterPassExpProcess = app.getAttributeValue("afterPassExpProcess");
							    LogEnablement.isLogDebugEnabled(expLogger,"afterPassExpProcess " + afterPassExpProcess);
							    String scramPwdattr = app.getAttributeValue("scramPwdattr");
							    LogEnablement.isLogDebugEnabled(expLogger,"scramPwdattr " + scramPwdattr);
							    if(scramPwdattr==null||scramPwdattr.length()<=0)
						       	{
						       	     //Let's get password attribute from LDAP Connector attribute "passwordAttr"
						       		if(app!=null && app.getAttributeValue("passwordAttr")!=null)
						           	{
						       			scramPwdattr=(String)app.getAttributeValue("passwordAttr");
						           	}
						       		else
						       		{
						       		   // Default Connector Password Support
						       			scramPwdattr=ProvisioningPlan.ATT_PASSWORD;
						       		}
						       	}
							    if(pwdAttr!=null)
							    {
							    pwdAttrValueFromLink = link.getAttribute(pwdAttr);
							    LogEnablement.isLogDebugEnabled(expLogger,"pwdAttrValueFromLink " + pwdAttrValueFromLink);
							    }
							     try 
							    {
							    	if(xDaysOldPassword!=null && xDaysOldPassword.length()>0)
							    	{
							     	 xDaysOld = Integer.parseInt(xDaysOldPassword);
							     	}
							    }
							    catch(java.lang.NumberFormatException nfe) 
							    {
							      xDaysOld = 0;
							    }
							    try 
							    {
							    	if(daysBeforeExpstr!=null && daysBeforeExpstr.length()>0)
							    	{
							     	 daysBeforeExp = Integer.parseInt(daysBeforeExpstr);
							     	}
							    }
							    catch(java.lang.NumberFormatException nfe) 
							    {
							      daysBeforeExp = 0;
							    }
							    try 
							    {
							    	if(daysAfterExpstr!=null && daysAfterExpstr.length()>0)
							    	{
							      	daysAfterExp = Integer.parseInt(daysAfterExpstr);
							      	}
							    }
							    catch(java.lang.NumberFormatException nfe) 
							    {
							      daysAfterExp = 0;
							    }
       						//daysAfterExp can be 0 because "Do Nothing" Option can be selected for After Expiration
			               if (Util.isNotNullOrEmpty(pwdAttr) && Util.isNotNullOrEmpty(pwdAttrExpression)  && xDaysOld!=0 && daysBeforeExp!=0 && pwdAttrValueFromLink!=null) 
					        {
					           Date pwdAge=null;
					          if(pwdAttrExpression.equalsIgnoreCase("Windows NT Time Format"))
					          {
					          pwdAge = convertMSNanoToDate(pwdAttrValueFromLink);
					          }
					          else if(pwdAttrExpression.equalsIgnoreCase("YYYYMMDDHHMMSST Format"))
					          {
					           pwdAge = utcDate(pwdAttrValueFromLink);
					          }
					          else if(pwdAttrExpression.equalsIgnoreCase("Extended Rule") && pwdexpAttrexpressionrule!=null)
					          {
						          	Rule rule=context.getObjectByName(Rule.class, pwdexpAttrexpressionrule);
						           	HashMap params = new HashMap();
		                            params.put("link", link);
		                            params.put("pwdAttrValueFromLink", pwdAttrValueFromLink);
		                            params.put("app", app);
						         	pwdAge = context.runRule(rule,params);
							          if(rule!=null)
							          {
							          context.decache(rule);
							          }
					          }
					          if(pwdAge!=null)
					          {
						          LogEnablement.isLogDebugEnabled(expLogger,"pwdAge=" + pwdAge);
						          Calendar cal = new GregorianCalendar();
						          cal.setTime(pwdAge);
						          //Example of xDaysOld requirement: Personal Services Accounts must be reset in 90 0r 60 days (add these days to last time password was reset )
						          cal.add(Calendar.DAY_OF_YEAR, xDaysOld);
						          int daysBeforePwdExpires = Util.getDaysDifference(new Date(), cal.getTime());
						          LogEnablement.isLogDebugEnabled(expLogger,"daysBeforePwdExpires=" + daysBeforePwdExpires);
						          //Password has already expired (daysBeforePwdExpires > 0) but is same as after expiration limit (daysBeforePwdExpires == daysAfterExp)
						          boolean launchWorkflow=false;
						          boolean isExpired =false;
						          boolean provisionAccount =false;
						          boolean onlyNotify =false;
						          String workflowName= "Privileged Account";
						          ProvisioningPlan plan=null;
						          String action=null;
						          if (daysBeforePwdExpires > 0 && daysBeforePwdExpires == daysAfterExp) 
						          {
						            isExpired= true;
						            launchWorkflow=true;
						            provisionAccount=true;
						            onlyNotify=false;
						            workflowName=workflowName+" After Expiration Action ";
						            //Build Account Request , Attribute Request from Application Options
						            if(afterPassExpProcess!=null && !afterPassExpProcess.equalsIgnoreCase("Do Nothing"))
						            {
						              plan= new ProvisioningPlan();
						              action=afterPassExpProcess;
						              //Generate Password Attribute Request
						              AttributeRequest passwordAttributeRequest=null;
						              if(action!=null && action.contains("Scramble") && link!=null && scramPwdattr!=null)
						              {
						                  String passwordValue=generatePasswordValue(app, link.getIdentity().getName());
							              if(pwdAttr!=null && passwordValue!=null)
								          {
								           passwordAttributeRequest =ROADUtil.generateSetAttributeRequest(scramPwdattr, passwordValue);
								          }
								         AccountRequest acctReqPassword = new AccountRequest(AccountRequest.Operation.Modify, appName, null, link.getNativeIdentity());
							             if(passwordAttributeRequest!=null)
							             {
							             acctReqPassword.add(passwordAttributeRequest);
							              LogEnablement.isLogDebugEnabled(expLogger,"Add Scramble Password  Request");
							             plan.add(acctReqPassword);
							             }
							          }
							          //Generate Disable Attribute Request
						              if(action!=null && action.contains("Disable")  && link!=null)
						              {
							             AccountRequest acctReq = new AccountRequest(AccountRequest.Operation.Disable, appName, null, link.getNativeIdentity());
							              LogEnablement.isLogDebugEnabled(expLogger,"Add Disable Account Request");
							             plan.add(acctReq);
							          }
						            }
						          }
						          // Password is going to expire and is within the before expiration limit
						          else if (daysBeforePwdExpires <= 0 && daysBeforePwdExpires >= (daysBeforeExp*(-1)))
						          {
						             	isExpired = false;
						             	launchWorkflow=true;
						             	provisionAccount=false;
						             	onlyNotify=true;
						             	workflowName=workflowName+" Email Expiry Reminder for ";
						          }
						          String iiqDisabled="false";
						          iiqDisabled=ROADUtil.isLinkDisabled(link);
						          if(launchWorkflow && link!=null && iiqDisabled.equalsIgnoreCase("false"))
						          {
						          		HashMap  map = new HashMap();
										map.put("launcher", "spadmin");
										map.put("daysBeforePwdExpires", new Integer(Math.abs(daysBeforePwdExpires)));
										map.put("isExpired", new Boolean(isExpired));
										map.put("accountName", link.getNativeIdentity());
										map.put("appName", appName);
										map.put("identityName", link.getIdentity().getName());
										map.put("provisionAccount", provisionAccount);
										map.put("plan", plan);
										map.put("action", action);
										map.put("onlyNotify", onlyNotify);
										Workflower wf = new Workflower(context);
										Workflow newWorkflow = context.getObjectByName(Workflow.class, "Workflow-PSA-PasswordExpiration"); 
										if (newWorkflow != null) 
										{
									  		WorkflowLaunch wfLaunch = wf.launchSafely(newWorkflow, workflowName + link.getIdentity().getName(), map); 
										}
						          }
						        }
						        if(link!=null)
						        {
						        context.decache(link);
						        }
					        }
	                	}
	              	}
	          	}
	          	if(app!=null)
               	{
               	context.decache(app);
               	}
          	}
        LogEnablement.isLogDebugEnabled(expLogger,"Exit Rule-Framework-PSA-PasswordExpiration");
		return "Success";
    
  ]]></Source>
</Rule>