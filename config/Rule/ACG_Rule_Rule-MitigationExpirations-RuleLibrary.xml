<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="Rule-MitigationExpirations-RuleLibrary">
  <Source><![CDATA[
	
	import java.text.ParseException;
	import java.util.Date;
	import java.util.Iterator;
	import java.util.List;
	import java.util.Map;
	import org.apache.commons.logging.Log;
	import org.apache.commons.logging.LogFactory;
	import sailpoint.api.SailPointContext;
    import sailpoint.object.Filter.MatchMode;
    import sailpoint.object.Filter;
    import sailpoint.object.QueryOptions;
    import sailpoint.object.Certification;
	import sailpoint.object.Attributes;
	import sailpoint.object.Bundle;
	import sailpoint.object.CertifiableDescriptor;
	import sailpoint.object.CertificationLink;
	import sailpoint.object.EntitlementSnapshot;
	import sailpoint.object.Identity;
	import sailpoint.object.MitigationExpiration;
	import sailpoint.object.ProvisioningPlan;
	import sailpoint.object.ProvisioningPlan.AccountRequest;
	import sailpoint.object.ProvisioningPlan.AttributeRequest;
	import sailpoint.object.Workflow;
	import sailpoint.object.Application;
	import sailpoint.object.ProvisioningProject;
	import sailpoint.object.PolicyViolation;
	import sailpoint.tools.GeneralException;
	import sailpoint.tools.Util;
	import sailpoint.rapidapponboarding.rule.ROADUtil;
	import sailpoint.rapidapponboarding.logger.LogEnablement;
	private Log logger = LogFactory.getLog("rapidapponboarding.rules");
	/**
	 * Build Mitigation Plan
	 * @param context
	 * @param identityName
	 * @param workflow
	 * @return
	 */
   	public ProvisioningPlan buildMitigation(SailPointContext context, String identityName, Workflow workflow) {
        LogEnablement.isLogDebugEnabled(logger,"Enter buildMitigation");
        ProvisioningPlan plan = null;
        AccountRequest acctReq;
        Identity identity = context.getObjectByName(Identity.class, identityName);
		if(null != identity && identity.getMitigationExpirations() != null)
		{
			plan = new ProvisioningPlan();
	        List meList = identity.getMitigationExpirations();
	        Date now = new Date();
	        for (MitigationExpiration me : meList) {
	        	if (me!=null && me.getExpiration() != null) 
	        	{
	        	    String comments=me.getComments();
	        	    CertifiableDescriptor cd = me.getCertifiableDescriptor();
        			CertificationLink clink=me.getCertificationLink();
        			PolicyViolation pv=cd.getPolicyViolation();
					if (null!=clink && null==pv &&  (me.getExpiration().compareTo(now) < 0) &&  ((comments==null||comments.length()<=0) || (comments!=null && !comments.equalsIgnoreCase("MOVER EVENT PROCESSED")))) {
						LogEnablement.isLogDebugEnabled(logger,"...Mitigations Not Completed");
		                acctReq = getMitigation(context, me, identityName);
		                if (acctReq != null ) {
			                plan.add(acctReq);
			                me.setLastActionDate(new Date());
			                me.setComments("MOVER EVENT PROCESSED");
			                context.saveObject(me);
			                context.commitTransaction();
			            }
		            }
		            else {
		            	LogEnablement.isLogDebugEnabled(logger,"...Mitigations Not Expired or Completed");                
		            }
	            }
	        }
        }
        if(null != identity)
        {
        context.decache(identity);
        }
        LogEnablement.isLogDebugEnabled(logger,"Exit buildMitigation");
        return plan;
    }
    /**
     * Get Mitigitaions from Mover Certification
     * @param context
     * @param me
     * @param identityName
     * @return
     */
    private AccountRequest getMitigation(SailPointContext context, MitigationExpiration me, String identityName) {
    	LogEnablement.isLogDebugEnabled(logger,"Enter getMitigation");
        AccountRequest acctReq=null;
        AccountRequest.Operation op = AccountRequest.Operation.Modify;
        CertifiableDescriptor cd = me.getCertifiableDescriptor();
        CertificationLink clink=me.getCertificationLink();
        if(clink!=null)
        {
        String certificationid=clink.getId();
        LogEnablement.isLogDebugEnabled(logger,"...certificationid "+certificationid);
        QueryOptions qo = new QueryOptions();
        boolean moverCert=false;
        String certificationNamePrefix=null;
        List customMaps = ROADUtil.getListOfMoverSettings(context);
        if (customMaps != null && customMaps.size() > 0) 
        {
	        	Map singleMap = (HashMap) customMaps.get(0);
	     	    if (singleMap.get("certificationNamePrefix") != null) 
	           	{
	       	    	certificationNamePrefix = singleMap.get("certificationNamePrefix");
	       	    	LogEnablement.isLogDebugEnabled(logger,"...certificationNamePrefix "+certificationNamePrefix);
	       	    }
	     }
        if(certificationid!=null && certificationNamePrefix!=null)
        {
	        qo.addFilter(Filter.eq("id", certificationid));
	        Iterator cert=context.search(Certification.class, qo, "name");
	        if(cert!=null)
	        {
		        while (cert.hasNext()) 
		    	{
		    	   LogEnablement.isLogDebugEnabled(logger,"..Found Cert "+cert);
		    	   Object[] rowName = cert.next();
		    	    LogEnablement.isLogDebugEnabled(logger,"..Found rowName "+rowName);
		    	    if(rowName!=null && rowName.length==1)
		    	    {
		             	String name = (String)rowName[0];
		           	    LogEnablement.isLogDebugEnabled(logger,"..name "+name);
			            if(name!=null && name.contains(certificationNamePrefix))
			            {
			            moverCert=true;
			            }
		           }			            
		      	}
	      	}
	      	 Util.flushIterator(cert); 
        }
        LogEnablement.isLogDebugEnabled(logger,"...moverCert "+moverCert);
        if ((null != cd) && (null == cd.getBusinessRole()) && moverCert) 
        {
            EntitlementSnapshot es = cd.getExceptionEntitlements();
              String appName ="";
	          String accountName = "";
            if(es != null && es.isAccountOnly())
            {
                appName = es.getApplicationName();
	            accountName = es.getNativeIdentity();
	       		if(appName!=null)
		   		{
		   		       LogEnablement.isLogDebugEnabled(logger,"Account Only Mitigation");
		   		        Application app = context.getObjectByName(Application.class, appName);
		   		          LogEnablement.isLogDebugEnabled(logger,"Account Only Mitigation appName "+appName);
		   		             LogEnablement.isLogDebugEnabled(logger,"Account Only Mitigation accountName "+accountName);
		   		        if(app!=null)
		   		        {
			   		        String revocationOperation=app.getAttributeValue("moverRevocation");
			   		        if(revocationOperation!=null && !revocationOperation.equalsIgnoreCase("Do Nothing"))
			   		        {   
			   		        	acctReq = new AccountRequest();
              					acctReq.setApplication(appName);
		   	   					acctReq.setNativeIdentity(accountName);
				   		        if(revocationOperation!=null && revocationOperation.equalsIgnoreCase("Disable"))
				   		        {
								acctReq.setOperation(ProvisioningPlan.AccountRequest.Operation.Disable);	
								}
								if(revocationOperation!=null && revocationOperation.equalsIgnoreCase("Delete"))
								{
								acctReq.setOperation(ProvisioningPlan.AccountRequest.Operation.Delete);	
								}	
							}
							context.decache(app);
						}
				}
            }
            else if (es != null && es.getAttributes() != null) 
            {
	            Map esAttrs = es.getAttributes();
	             appName = es.getApplicationName();
	          	accountName = es.getNativeIdentity();
	            Iterator it = esAttrs.entrySet().iterator();
	            while (it != null && it.hasNext()) {
	                Map.Entry pair = (Map.Entry) it.next();
	                String attribute = pair.getKey();
	                String value = pair.getValue();
	                if (value != null) {                   
	                    acctReq = new AccountRequest();
	                    acctReq.setApplication(appName);
				   		acctReq.setNativeIdentity(accountName);
						acctReq.setOperation(ProvisioningPlan.AccountRequest.Operation.Modify);		
	                    Attributes attrs = new Attributes();
	          			attrs.put("assignment", "true");
	          			AttributeRequest newAttrReq = new AttributeRequest(attribute, ProvisioningPlan.Operation.Remove, value);
	          			newAttrReq.setArguments(attrs);
	          			acctReq.add(newAttrReq);
	                }
	            }
	            if (it != null) {
	            	Util.flushIterator(it);
	            }
            }
        }
        else if ((null != cd) && (null != cd.getBusinessRole()) && moverCert) {
            String brName = "";
            brName = cd.getBusinessRole();
            Bundle bundle = context.getObjectByName(Bundle.class, brName);
            if (bundle != null && (!(brName.equals("")))) 
            {
	            if (bundle instanceof Bundle) {
	                acctReq = new AccountRequest();
			        acctReq.setApplication(ProvisioningPlan.APP_IIQ);
			   		acctReq.setNativeIdentity(identityName);
					acctReq.setOperation(ProvisioningPlan.AccountRequest.Operation.Modify);
					if(null != bundle){	        
		                AttributeRequest attrReq = new AttributeRequest();
		                attrReq.setName(ProvisioningPlan.ATT_IIQ_ASSIGNED_ROLES);
		                attrReq.setOperation(ProvisioningPlan.Operation.Remove);
		                attrReq.setValue(brName);
		                acctReq.add(attrReq);
            		}
	            }
            }
            if(bundle!=null)
            {
            context.decache(bundle);
            }
        }
        }
        return acctReq;
    }
	/**
	 * Get Request Type
	 * @param context
	 * @param workflow
	 * @return
	 */
	public String getRequestTypeName(SailPointContext context, Workflow workflow){
		String requestType = "MANAGER CERTIFICATION ALLOW EXCEPTION FEATURE";
		return requestType;
	}
	 /**
	 * Execute Post Mitigation Rule
	 * @param identityName
	 * @param project
	 * @param requestType
	 */
    public void postMitigationRule(String identityName, String requestType, ProvisioningProject project)
    {
    	LogEnablement.isLogDebugEnabled(logger,"Start  postMitigationRule" );
    	LogEnablement.isLogDebugEnabled(logger,"..identityName..."+identityName );
    	LogEnablement.isLogDebugEnabled(logger,"..requestType..."+requestType );
    	LogEnablement.isLogDebugEnabled(logger,"..project..."+project );
    	Map map = new HashMap();
	    //Common Configuration
        map = ROADUtil.getCustomGlobalMap(context);
        if(map!=null && map.containsKey("postMitigationRule"))
		{
		    String ruleName=map.get("postMitigationRule");
		    if(ruleName!=null && ruleName.length()>0)
		    {
		    ROADUtil.invokePostExtendedRuleNoObjectReferences(context,null,ruleName, null,  requestType, null, null, null, identityName,null, project);
		    }
		 }
	 	LogEnablement.isLogDebugEnabled(logger,"End  postMitigationRule" );
    }
	
	]]></Source>
</Rule>