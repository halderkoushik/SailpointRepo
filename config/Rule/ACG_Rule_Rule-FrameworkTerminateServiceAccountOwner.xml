<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="Rule-FrameworkTerminateServiceAccountOwner">
  <Description>
  		Used for TerminationProcess and Delay
 	</Description>
  <Signature returnType="Object">
    <Inputs>
      <Argument name="context">
        <Description>
					SailPointContext
				</Description>
      </Argument>
      <Argument name="identityName">
        <Description>
					Identity
				</Description>
      </Argument>
      <Argument name="allAcctRequests">
        <Description>
					LIST OF AccountRequests
				</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Source><![CDATA[
  
  		import java.util.ArrayList;
		import java.util.List;
		import java.util.concurrent.TimeUnit;
		import org.apache.log4j.Level;
		import org.apache.commons.logging.Log;
		import org.apache.commons.logging.LogFactory;
		import sailpoint.api.SailPointContext;
		import sailpoint.object.Application;
		import sailpoint.object.Identity;
		import sailpoint.object.ProvisioningPlan;
		import sailpoint.object.ProvisioningPlan.AccountRequest;
		import sailpoint.tools.GeneralException;		
		import sailpoint.rapidapponboarding.logger.LogEnablement;
		import sailpoint.rapidapponboarding.rule.WorkflowUtil;
	   //CREATE A  LOG4J LOGGER SO RULES CAN BE LOGGED LIKE ALL OTHER COMPONENTS
	    Log logger = LogFactory.getLog("rapidapponboarding.rules");
   	    Identity identity= context.getObjectByName(Identity.class, identityName);
	    ProvisioningPlan plan = new ProvisioningPlan();
   	    if (allAcctRequests!=null && !(allAcctRequests.isEmpty())) 
	    {
			if (identity != null) 
			{
   				plan.setIdentity(identity);
			}
           	for (AccountRequest acctReq : allAcctRequests) 
           	{
           		plan.add(acctReq);
           	}
           	WorkflowUtil.launchRequestManagerWorkflow(context,identityName, plan, "", null, 10,"SERVICEACCOUNT", null,null,"ServiceAccountOwners",null);
	   	}
		return null;
    
]]></Source>
</Rule>